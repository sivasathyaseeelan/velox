"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/nilql.ts
var nilql_exports = {};
__export(nilql_exports, {
  nilql: () => nilql
});
module.exports = __toCommonJS(nilql_exports);
var bcu = __toESM(require("bigint-crypto-utils"), 1);
var import_libsodium_wrappers_sumo = __toESM(require("libsodium-wrappers-sumo"), 1);
var paillierBigint = __toESM(require("paillier-bigint"), 1);
var _PLAINTEXT_SIGNED_INTEGER_MIN = BigInt(-2147483648);
var _PLAINTEXT_SIGNED_INTEGER_MAX = BigInt(2147483647);
var _SECRET_SHARED_SIGNED_INTEGER_MODULUS = 2n ** 32n + 15n;
var _PLAINTEXT_STRING_BUFFER_LEN_MAX = 4096;
function _mod(n, m) {
  return ((n < 0 ? n + m : n) % m + m) % m;
}
function _xor(a, b) {
  const length = Math.min(a.length, b.length);
  const r = Buffer.alloc(length);
  for (let i = 0; i < length; i++) {
    r[i] = a[i] ^ b[i];
  }
  return r;
}
function _concat(a, b) {
  const c = new Uint8Array(a.length + b.length);
  c.set(a);
  c.set(b, a.length);
  return c;
}
function _equalKeys(a, b) {
  const zip = (a2, b2) => a2.map((k, i) => [k, b2[i]]);
  return zip(a, b).every((pair) => pair[0] === pair[1]);
}
async function _sha512(bytes) {
  const buffer = await crypto.subtle.digest("SHA-512", bytes);
  return new Uint8Array(buffer);
}
async function _seeds(seed, index) {
  if (index < 0 || index >= 2n ** 64n) {
    throw new RangeError("index must be a 64-bit unsigned integer value");
  }
  const buffer = Buffer.alloc(8);
  buffer.writeBigInt64LE(index, 0);
  return await _sha512(_concat(seed, new Uint8Array(buffer)));
}
async function _randomBytes(length, seed = null) {
  await import_libsodium_wrappers_sumo.default.ready;
  if (seed !== null) {
    let bytes = new Uint8Array();
    const iterations = Math.floor(length / 64) + (length % 64 > 0 ? 1 : 0);
    for (let i = 0n; i < iterations; i++) {
      bytes = _concat(bytes, await _seeds(seed, i));
    }
    return bytes.subarray(0, length);
  }
  return import_libsodium_wrappers_sumo.default.randombytes_buf(length);
}
async function _randomInteger(minimum, maximum, seed = null) {
  if (minimum < 0 || minimum > 1) {
    throw new RangeError("minimum must be 0 or 1");
  }
  if (maximum <= minimum || maximum >= _SECRET_SHARED_SIGNED_INTEGER_MODULUS) {
    throw new RangeError(
      "maximum must be greater than the minimum and less than the modulus"
    );
  }
  const range = maximum - minimum;
  let integer = null;
  let index = 0n;
  while (integer === null || integer > range) {
    const uint8Array = await _randomBytes(
      8,
      seed !== null ? await _seeds(seed, index) : null
    );
    index++;
    uint8Array[4] &= 1;
    uint8Array[5] &= 0;
    uint8Array[6] &= 0;
    uint8Array[7] &= 0;
    const buffer = Buffer.from(uint8Array);
    const small = BigInt(buffer.readUInt32LE(0));
    const large = BigInt(buffer.readUInt32LE(4));
    integer = small + large * 2n ** 32n;
  }
  return minimum + integer;
}
function _pack(b) {
  return Buffer.from(b).toString("base64");
}
function _unpack(s) {
  return new Uint8Array(Buffer.from(s, "base64"));
}
function _encode(value) {
  let bytes;
  if (typeof value === "bigint") {
    const buffer = Buffer.alloc(9);
    buffer[0] = 0;
    buffer.writeBigInt64LE(value, 1);
    bytes = new Uint8Array(buffer);
  } else {
    bytes = new TextEncoder().encode(value);
    const byte = new Uint8Array(1);
    byte[0] = 1;
    bytes = _concat(byte, bytes);
  }
  return bytes;
}
function _decode(bytes) {
  if (bytes[0] === 0) {
    return Buffer.from(bytes).readBigInt64LE(1);
  }
  const decoder = new TextDecoder("utf-8");
  return decoder.decode(Buffer.from(bytes.subarray(1)));
}
var SecretKey = class _SecretKey {
  material;
  cluster;
  operations;
  constructor(cluster, operations) {
    if (cluster.nodes === void 0 || cluster.nodes.length < 1) {
      throw new TypeError(
        "cluster configuration must contain at least one node"
      );
    }
    if (Object.keys(operations).length !== 1 || !operations.store && !operations.match && !operations.sum) {
      throw new TypeError("secret key must enable exactly one operation");
    }
    this.material = {};
    this.cluster = cluster;
    this.operations = operations;
  }
  /**
   * Generate a new secret key built according to what is specified in the supplied
   * cluster configuration and operation list.
   */
  static async generate(cluster, operations, seed = null) {
    await import_libsodium_wrappers_sumo.default.ready;
    const seedBytes = seed === null ? null : typeof seed === "string" ? new TextEncoder().encode(seed) : new Uint8Array(seed);
    const secretKey = new _SecretKey(cluster, operations);
    if (secretKey.operations.store) {
      if (secretKey.cluster.nodes.length === 1) {
        secretKey.material = await _randomBytes(
          import_libsodium_wrappers_sumo.default.crypto_secretbox_KEYBYTES,
          seedBytes
        );
      } else {
        secretKey.material = await _randomBytes(
          _PLAINTEXT_STRING_BUFFER_LEN_MAX,
          seedBytes
        );
      }
    }
    if (secretKey.operations.match) {
      secretKey.material = await _randomBytes(64, seedBytes);
    }
    if (secretKey.operations.sum) {
      if (secretKey.cluster.nodes.length === 1) {
        if (seed !== null) {
          throw Error(
            "seed-based derivation of summation-compatible keys is not supported for single-node clusters"
          );
        }
        const { privateKey } = await paillierBigint.generateRandomKeys(2048);
        secretKey.material = privateKey;
      } else {
        secretKey.material = Number(
          await _randomInteger(
            1n,
            _SECRET_SHARED_SIGNED_INTEGER_MODULUS - 1n,
            seedBytes
          )
        );
      }
    }
    return secretKey;
  }
  /**
   * Return a JSON-compatible object representation of the key instance.
   */
  dump() {
    const object = {
      material: {},
      cluster: this.cluster,
      operations: this.operations
    };
    if (typeof this.material === "number") {
      object.material = this.material;
    } else if (this.material instanceof Uint8Array) {
      object.material = _pack(this.material);
    } else if (Object.keys(this.material).length === 0) {
    } else {
      const privateKey = this.material;
      object.material = {
        n: privateKey.publicKey.n.toString(),
        g: privateKey.publicKey.g.toString(),
        l: privateKey.lambda.toString(),
        m: privateKey.mu.toString()
      };
    }
    return object;
  }
  /**
   * Create an instance from its JSON-compatible object representation.
   */
  static load(object) {
    const errorInvalid = new TypeError(
      "invalid object representation of a secret key"
    );
    if (!("material" in object && "cluster" in object && "operations" in object)) {
      throw errorInvalid;
    }
    const secretKey = new _SecretKey(
      object.cluster,
      object.operations
    );
    if (typeof object.material === "number") {
      secretKey.material = object.material;
    } else if (typeof object.material === "string") {
      secretKey.material = _unpack(object.material);
    } else if (Object.keys(object.material).length === 0) {
    } else {
      const material = object.material;
      if (!("l" in material && "m" in material && "n" in material && "g" in material)) {
        throw errorInvalid;
      }
      if (!(typeof material.l === "string" && typeof material.m === "string" && typeof material.n === "string" && typeof material.g === "string")) {
        throw errorInvalid;
      }
      secretKey.material = new paillierBigint.PrivateKey(
        BigInt(material.l),
        BigInt(material.m),
        new paillierBigint.PublicKey(
          BigInt(material.n),
          BigInt(material.g)
        )
      );
    }
    return secretKey;
  }
};
var ClusterKey = class _ClusterKey extends SecretKey {
  /**
   * Generate a new cluster key built according to what is specified in the supplied
   * cluster configuration and operation list.
   */
  static async generate(cluster, operations) {
    const clusterKey = await SecretKey.generate(cluster, operations);
    if (clusterKey.cluster.nodes.length > 1) {
      if (clusterKey.operations.store) {
        clusterKey.material = Buffer.alloc(_PLAINTEXT_STRING_BUFFER_LEN_MAX);
      }
      if (clusterKey.operations.sum) {
        clusterKey.material = 1;
      }
    }
    return clusterKey;
  }
  /**
   * Create an instance from its JSON-compatible object representation.
   */
  static load(object) {
    const secretKey = SecretKey.load(object);
    const clusterKey = new _ClusterKey(secretKey.cluster, secretKey.operations);
    clusterKey.material = secretKey.material;
    return clusterKey;
  }
};
var PublicKey2 = class _PublicKey {
  material;
  cluster;
  operations;
  constructor(secretKey) {
    this.cluster = secretKey.cluster;
    this.operations = secretKey.operations;
    if (typeof secretKey.material === "object" && "publicKey" in secretKey.material && secretKey.material.publicKey instanceof paillierBigint.PublicKey) {
      this.material = secretKey.material.publicKey;
    } else {
      throw new TypeError("cannot create public key for supplied secret key");
    }
  }
  /**
   * Generate a new public key corresponding to the supplied secret key
   * according to any information contained therein.
   */
  static async generate(secretKey) {
    return new _PublicKey(secretKey);
  }
  /**
   * Return a JSON-compatible object representation of the key instance.
   */
  dump() {
    const object = {
      material: {},
      cluster: this.cluster,
      operations: this.operations
    };
    if (typeof this.material === "object" && "n" in this.material && "g" in this.material) {
      const publicKey = this.material;
      object.material = {
        n: publicKey.n.toString(),
        g: publicKey.g.toString()
      };
    }
    return object;
  }
  /**
   * Create an instance from its JSON-compatible object representation.
   */
  static load(object) {
    const errorInvalid = new TypeError(
      "invalid object representation of a public key"
    );
    if (!("material" in object && "cluster" in object && "operations" in object)) {
      throw errorInvalid;
    }
    const publicKey = {};
    publicKey.cluster = object.cluster;
    publicKey.operations = object.operations;
    const material = object.material;
    if (!("n" in material && "g" in material)) {
      throw errorInvalid;
    }
    if (!(typeof material.n === "string" && typeof material.g === "string")) {
      throw errorInvalid;
    }
    publicKey.material = new paillierBigint.PublicKey(
      BigInt(material.n),
      BigInt(material.g)
    );
    return publicKey;
  }
};
async function encrypt(key, plaintext) {
  await import_libsodium_wrappers_sumo.default.ready;
  let bytes = Buffer.from(new Uint8Array());
  let bigInt = 0n;
  if (typeof plaintext === "number" || typeof plaintext === "bigint") {
    bigInt = typeof plaintext === "number" ? BigInt(Number(plaintext)) : plaintext;
    if (bigInt < _PLAINTEXT_SIGNED_INTEGER_MIN || bigInt > _PLAINTEXT_SIGNED_INTEGER_MAX) {
      throw new TypeError(
        "numeric plaintext must be a valid 32-bit signed integer"
      );
    }
  } else {
    bytes = Buffer.from(_encode(plaintext));
    if (bytes.length > _PLAINTEXT_STRING_BUFFER_LEN_MAX) {
      const len = _PLAINTEXT_STRING_BUFFER_LEN_MAX;
      throw new TypeError(
        `string plaintext must be possible to encode in ${len} bytes or fewer`
      );
    }
  }
  if (key.operations.store) {
    const secretKey = key;
    if (typeof plaintext === "number" || typeof plaintext === "bigint") {
      bytes = Buffer.from(_encode(bigInt));
    }
    if (key.cluster.nodes.length === 1) {
      const symmetricKey = secretKey.material;
      const nonce = import_libsodium_wrappers_sumo.default.randombytes_buf(import_libsodium_wrappers_sumo.default.crypto_secretbox_NONCEBYTES);
      return _pack(
        _concat(
          nonce,
          import_libsodium_wrappers_sumo.default.crypto_secretbox_easy(bytes, nonce, symmetricKey)
        )
      );
    }
    if (key.cluster.nodes.length > 1) {
      const shares = [];
      let aggregate = Buffer.alloc(bytes.length, 0);
      for (let i = 0; i < key.cluster.nodes.length - 1; i++) {
        const mask = Buffer.from(import_libsodium_wrappers_sumo.default.randombytes_buf(bytes.length));
        aggregate = _xor(aggregate, mask);
        shares.push(new Uint8Array(mask));
      }
      shares.push(
        new Uint8Array(
          _xor(
            aggregate,
            _xor(secretKey.material, Buffer.from(bytes))
          )
        )
      );
      return shares.map(_pack);
    }
  }
  if (key.operations.match) {
    const secretKey = key;
    if (typeof plaintext === "number" || typeof plaintext === "bigint") {
      bytes = Buffer.from(_encode(bigInt));
    }
    const hashed = await _sha512(
      _concat(secretKey.material, bytes)
    );
    const packed = _pack(hashed);
    if (key.cluster.nodes.length === 1) {
      return packed;
    }
    return key.cluster.nodes.map((_) => packed);
  }
  if (key.operations.sum) {
    const secretKey = key;
    if (!(typeof plaintext === "number" || typeof plaintext === "bigint")) {
      throw new TypeError(
        "plaintext to encrypt for sum operation must be number or bigint"
      );
    }
    if (key.cluster.nodes.length === 1) {
      let paillierPublicKey;
      if ("publicKey" in key.material) {
        paillierPublicKey = key.material.publicKey;
      } else {
        paillierPublicKey = key.material;
      }
      paillierPublicKey = new paillierBigint.PublicKey(
        paillierPublicKey.n,
        paillierPublicKey.g
      );
      return paillierPublicKey.encrypt(bigInt - _PLAINTEXT_SIGNED_INTEGER_MIN).toString(16);
    }
    const shares = [];
    let total = BigInt(0);
    for (let i = 0; i < key.cluster.nodes.length - 1; i++) {
      const share = await _randomInteger(
        0n,
        _SECRET_SHARED_SIGNED_INTEGER_MODULUS - 1n
      );
      shares.push(
        _mod(
          BigInt(secretKey.material) * share,
          _SECRET_SHARED_SIGNED_INTEGER_MODULUS
        )
      );
      total = _mod(total + share, _SECRET_SHARED_SIGNED_INTEGER_MODULUS);
    }
    shares.push(
      _mod(
        _mod(bigInt - total, _SECRET_SHARED_SIGNED_INTEGER_MODULUS) * BigInt(secretKey.material),
        _SECRET_SHARED_SIGNED_INTEGER_MODULUS
      )
    );
    return shares.map(Number);
  }
  throw new Error("internal encryption error");
}
async function decrypt(secretKey, ciphertext) {
  await import_libsodium_wrappers_sumo.default.ready;
  if (secretKey.cluster.nodes.length === 1) {
    if (typeof ciphertext !== "bigint" && typeof ciphertext !== "string") {
      throw new TypeError(
        "secret key requires a valid ciphertext from a single-node cluster"
      );
    }
  } else {
    if (!Array.isArray(ciphertext) || !ciphertext.every((c) => typeof c === "number") && !ciphertext.every((c) => typeof c === "string")) {
      throw new TypeError(
        "secret key requires a valid ciphertext from a multi-node cluster"
      );
    }
    if (secretKey.cluster.nodes.length !== ciphertext.length) {
      throw new TypeError(
        "secret key and ciphertext must have the same associated cluster size"
      );
    }
  }
  if (secretKey.operations.store) {
    if (secretKey.cluster.nodes.length === 1) {
      const symmetricKey = secretKey.material;
      const bytes = _unpack(ciphertext);
      const nonce = bytes.subarray(0, import_libsodium_wrappers_sumo.default.crypto_secretbox_NONCEBYTES);
      const cipher = bytes.subarray(import_libsodium_wrappers_sumo.default.crypto_secretbox_NONCEBYTES);
      try {
        return _decode(
          import_libsodium_wrappers_sumo.default.crypto_secretbox_open_easy(cipher, nonce, symmetricKey)
        );
      } catch (error) {
        throw new TypeError(
          "ciphertext cannot be decrypted using supplied secret key"
        );
      }
    } else {
      const shares = ciphertext.map(_unpack);
      let bytes = Buffer.from(shares[0]);
      for (let i = 1; i < shares.length; i++) {
        bytes = Buffer.from(_xor(bytes, Buffer.from(shares[i])));
      }
      return _decode(_xor(secretKey.material, bytes));
    }
  }
  if (secretKey.operations.sum) {
    if (secretKey.cluster.nodes.length === 1) {
      const paillierPrivateKey = secretKey.material;
      return paillierPrivateKey.decrypt(BigInt(`0x${ciphertext}`)) + _PLAINTEXT_SIGNED_INTEGER_MIN;
    }
    let plaintext = BigInt(0);
    const inverse = bcu.modPow(
      BigInt(secretKey.material),
      _SECRET_SHARED_SIGNED_INTEGER_MODULUS - 2n,
      _SECRET_SHARED_SIGNED_INTEGER_MODULUS
    );
    const shares = ciphertext;
    for (const share of shares) {
      const share_ = _mod(
        BigInt(share) * inverse,
        _SECRET_SHARED_SIGNED_INTEGER_MODULUS
      );
      plaintext = _mod(
        plaintext + share_,
        _SECRET_SHARED_SIGNED_INTEGER_MODULUS
      );
    }
    return plaintext - (plaintext > _PLAINTEXT_SIGNED_INTEGER_MAX ? _SECRET_SHARED_SIGNED_INTEGER_MODULUS : 0n);
  }
  throw new TypeError(
    "ciphertext cannot be decrypted using supplied secret key"
  );
}
function allot(document) {
  if (typeof document === "number" || typeof document === "boolean" || typeof document === "string" || document === null) {
    return [document];
  }
  if (Array.isArray(document)) {
    const results = document.map(allot);
    let multiplicity = 1;
    for (let i = 0; i < results.length; i++) {
      const result = results[i];
      if (result.length !== 1) {
        if (multiplicity === 1) {
          multiplicity = result.length;
        } else if (multiplicity !== result.length) {
          throw new TypeError(
            "number of shares in subdocument is not consistent"
          );
        }
      }
    }
    const shares = [];
    for (let i = 0; i < multiplicity; i++) {
      const share = [];
      for (let j = 0; j < results.length; j++) {
        share.push(results[j][results[j].length === 1 ? 0 : i]);
      }
      shares.push(share);
    }
    return shares;
  }
  if (document instanceof Object) {
    if ("$allot" in document) {
      if (Object.keys(document).length !== 1) {
        throw new TypeError("allotment must only have one key");
      }
      const items = document.$allot;
      if (items.every((item) => typeof item === "number") || items.every((item) => typeof item === "string")) {
        const shares3 = [];
        for (let i = 0; i < items.length; i++) {
          shares3.push({ $share: items[i] });
        }
        return shares3;
      }
      const sharesArrays = allot(
        items.map((item) => {
          return { $allot: item };
        })
      );
      const shares2 = [];
      for (let i = 0; i < sharesArrays.length; i++) {
        const sharesCurrent = sharesArrays[i];
        shares2.push({
          $share: sharesCurrent.map(
            (share) => share.$share
          )
        });
      }
      return shares2;
    }
    const existing = document;
    const results = {};
    let multiplicity = 1;
    for (const key in existing) {
      const result = allot(existing[key]);
      results[key] = result;
      if (result.length !== 1) {
        if (multiplicity === 1) {
          multiplicity = result.length;
        } else if (multiplicity !== result.length) {
          throw new TypeError(
            "number of shares in subdocument is not consistent"
          );
        }
      }
    }
    const shares = [];
    for (let i = 0; i < multiplicity; i++) {
      const share = {};
      for (const key in results) {
        const resultsForKey = results[key];
        share[key] = resultsForKey[resultsForKey.length === 1 ? 0 : i];
      }
      shares.push(share);
    }
    return shares;
  }
  throw new TypeError(
    "number, boolean, string, array, null, or object expected"
  );
}
async function unify(secretKey, documents, ignore = ["_created", "_updated"]) {
  if (documents.length === 1) {
    return documents[0];
  }
  if (documents.every((document) => Array.isArray(document))) {
    const length = documents[0].length;
    if (documents.every((document) => document.length === length)) {
      const results = [];
      for (let i = 0; i < length; i++) {
        const result = await unify(
          secretKey,
          documents.map((document) => document[i]),
          ignore
        );
        results.push(result);
      }
      return results;
    }
  }
  if (documents.every((document) => document instanceof Object)) {
    if (documents.every((document) => "$share" in document)) {
      if (documents.every((document) => typeof document.$share === "number") || documents.every((document) => typeof document.$share === "string")) {
        const shares = documents.map((document) => document.$share);
        const decrypted = decrypt(secretKey, shares);
        return decrypted;
      }
      const unwrapped = [];
      for (let i = 0; i < documents.length; i++) {
        unwrapped.push(documents[i].$share);
      }
      const length = unwrapped[0].length;
      const results = [];
      for (let i = 0; i < length; i++) {
        const shares = [];
        for (let j = 0; j < documents.length; j++) {
          shares.push({ $share: unwrapped[j][i] });
        }
        results.push(await unify(secretKey, shares, ignore));
      }
      return results;
    }
    const keys = Object.keys(documents[0]);
    const zip = (a, b) => a.map((k, i) => [k, b[i]]);
    if (documents.every((document) => _equalKeys(keys, Object.keys(document)))) {
      const results = {};
      for (const key in documents[0]) {
        if (ignore.indexOf(key) === -1) {
          const result = await unify(
            secretKey,
            documents.map(
              (document) => document[key]
            ),
            ignore
          );
          results[key] = result;
        }
      }
      return results;
    }
  }
  let allValuesEqual = true;
  for (let i = 1; i < documents.length; i++) {
    allValuesEqual &&= documents[0] === documents[i];
  }
  if (allValuesEqual) {
    return documents[0];
  }
  throw new TypeError("array of compatible document shares expected");
}
var nilql = {
  SecretKey,
  ClusterKey,
  PublicKey: PublicKey2,
  encrypt,
  decrypt,
  allot,
  unify
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  nilql
});
