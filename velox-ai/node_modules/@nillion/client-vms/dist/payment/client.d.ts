import type { Client } from "@connectrpc/connect";
import { SigningStargateClient } from "@cosmjs/stargate";
import { z } from "zod";
import { type PriceQuoteRequest } from "#/gen-proto/nillion/payments/v1/quote_pb";
import { type SignedReceipt } from "#/gen-proto/nillion/payments/v1/receipt_pb";
import { Quote } from "#/types/types";
import { TxHash } from "./types";
export declare const PaymentClientConfig: z.ZodObject<{
    address: z.ZodBranded<z.ZodString, "Address">;
    chain: z.ZodType<SigningStargateClient, z.ZodTypeDef, SigningStargateClient>;
    leader: z.ZodType<Client<import("@bufbuild/protobuf").DescService>, z.ZodTypeDef, Client<import("@bufbuild/protobuf").DescService>>;
}, "strip", z.ZodTypeAny, {
    leader: Client<import("@bufbuild/protobuf").DescService>;
    address: string & z.BRAND<"Address">;
    chain: SigningStargateClient;
}, {
    leader: Client<import("@bufbuild/protobuf").DescService>;
    address: string;
    chain: SigningStargateClient;
}>;
export type PaymentClientConfig = z.infer<typeof PaymentClientConfig>;
export declare class PaymentClient {
    private readonly config;
    private readonly address;
    private readonly chain;
    private readonly leader;
    constructor(config: PaymentClientConfig);
    payForOperation(request: PriceQuoteRequest): Promise<SignedReceipt>;
    quote(request: PriceQuoteRequest): Promise<Quote>;
    payOnChain(quote: Quote): Promise<TxHash>;
    validate(quote: Quote, txHash: TxHash): Promise<SignedReceipt>;
}
