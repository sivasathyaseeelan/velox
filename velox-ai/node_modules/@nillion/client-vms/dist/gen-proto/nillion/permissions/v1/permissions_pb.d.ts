import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { UserId } from "../../auth/v1/user_pb";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file nillion/permissions/v1/permissions.proto.
 */
export declare const file_nillion_permissions_v1_permissions: GenFile;
/**
 * The permissions for a set of stored values.
 *
 * @generated from message nillion.permissions.v1.permissions.Permissions
 */
export type Permissions = Message<"nillion.permissions.v1.permissions.Permissions"> & {
    /**
     * The user id for the owner of these values.
     *
     * @generated from field: nillion.auth.v1.user.UserId owner = 1;
     */
    owner?: UserId;
    /**
     * The list of user ids that are allowed to retrieve the stored values.
     *
     * @generated from field: repeated nillion.auth.v1.user.UserId retrieve = 2;
     */
    retrieve: UserId[];
    /**
     * The list of user ids that are allowed to update the stored values.
     *
     * @generated from field: repeated nillion.auth.v1.user.UserId update = 3;
     */
    update: UserId[];
    /**
     * The list of user ids that are allowed to delete the stored values.
     *
     * @generated from field: repeated nillion.auth.v1.user.UserId delete = 4;
     */
    delete: UserId[];
    /**
     * The list of compute permissions.
     *
     * @generated from field: repeated nillion.permissions.v1.permissions.ComputePermissions compute = 5;
     */
    compute: ComputePermissions[];
};
/**
 * Describes the message nillion.permissions.v1.permissions.Permissions.
 * Use `create(PermissionsSchema)` to create a new message.
 */
export declare const PermissionsSchema: GenMessage<Permissions>;
/**
 * The permissions to execute a program.
 *
 * @generated from message nillion.permissions.v1.permissions.ComputePermissions
 */
export type ComputePermissions = Message<"nillion.permissions.v1.permissions.ComputePermissions"> & {
    /**
     * The user id we're granting permissions to.
     *
     * @generated from field: nillion.auth.v1.user.UserId user = 1;
     */
    user?: UserId;
    /**
     * The program ids this user is allowed to use the stored values in.
     *
     * @generated from field: repeated string program_ids = 2;
     */
    programIds: string[];
};
/**
 * Describes the message nillion.permissions.v1.permissions.ComputePermissions.
 * Use `create(ComputePermissionsSchema)` to create a new message.
 */
export declare const ComputePermissionsSchema: GenMessage<ComputePermissions>;
