import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { SignedReceipt } from "../../payments/v1/receipt_pb";
import type { UserId } from "../../auth/v1/user_pb";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file nillion/compute/v1/invoke.proto.
 */
export declare const file_nillion_compute_v1_invoke: GenFile;
/**
 * A request to invoke a computation.
 *
 * @generated from message nillion.compute.v1.invoke.InvokeComputeRequest
 */
export type InvokeComputeRequest = Message<"nillion.compute.v1.invoke.InvokeComputeRequest"> & {
    /**
     * The receipt that proves this operation was paid for.
     *
     * The receipt must be for a `InvokeCompute` operation.
     *
     * @generated from field: nillion.payments.v1.receipt.SignedReceipt signed_receipt = 1;
     */
    signedReceipt?: SignedReceipt;
    /**
     * The value ids for previously stored values being used as parameters to this compute operation.
     *
     * @generated from field: repeated bytes value_ids = 2;
     */
    valueIds: Uint8Array[];
    /**
     * The values being used as compute-time parameters, encoded in bincode format.
     *
     * @generated from field: bytes bincode_values = 3;
     */
    bincodeValues: Uint8Array;
    /**
     * The bindings that define which input party in the program is which user in the network.
     *
     * @generated from field: repeated nillion.compute.v1.invoke.InputPartyBinding input_bindings = 4;
     */
    inputBindings: InputPartyBinding[];
    /**
     * The bindings that define which output party in the program is which users in the network.
     *
     * @generated from field: repeated nillion.compute.v1.invoke.OutputPartyBinding output_bindings = 5;
     */
    outputBindings: OutputPartyBinding[];
};
/**
 * Describes the message nillion.compute.v1.invoke.InvokeComputeRequest.
 * Use `create(InvokeComputeRequestSchema)` to create a new message.
 */
export declare const InvokeComputeRequestSchema: GenMessage<InvokeComputeRequest>;
/**
 * A response to a request to invoke a computation.
 *
 * @generated from message nillion.compute.v1.invoke.InvokeComputeResponse
 */
export type InvokeComputeResponse = Message<"nillion.compute.v1.invoke.InvokeComputeResponse"> & {
    /**
     * An identifier for the execution of the computation.
     *
     * @generated from field: bytes compute_id = 1;
     */
    computeId: Uint8Array;
};
/**
 * Describes the message nillion.compute.v1.invoke.InvokeComputeResponse.
 * Use `create(InvokeComputeResponseSchema)` to create a new message.
 */
export declare const InvokeComputeResponseSchema: GenMessage<InvokeComputeResponse>;
/**
 * The bindings for input parties in a program.
 *
 * @generated from message nillion.compute.v1.invoke.InputPartyBinding
 */
export type InputPartyBinding = Message<"nillion.compute.v1.invoke.InputPartyBinding"> & {
    /**
     * The name of the party as defined in the program.
     *
     * @generated from field: string party_name = 1;
     */
    partyName: string;
    /**
     * The user identity this party is being bound to.
     *
     * @generated from field: nillion.auth.v1.user.UserId user = 2;
     */
    user?: UserId;
};
/**
 * Describes the message nillion.compute.v1.invoke.InputPartyBinding.
 * Use `create(InputPartyBindingSchema)` to create a new message.
 */
export declare const InputPartyBindingSchema: GenMessage<InputPartyBinding>;
/**
 * The bindings for output parties in a program.
 *
 * @generated from message nillion.compute.v1.invoke.OutputPartyBinding
 */
export type OutputPartyBinding = Message<"nillion.compute.v1.invoke.OutputPartyBinding"> & {
    /**
     * The name of the party as defined in the program.
     *
     * @generated from field: string party_name = 1;
     */
    partyName: string;
    /**
     * The user identities this party is being bound to.
     *
     * @generated from field: repeated nillion.auth.v1.user.UserId users = 2;
     */
    users: UserId[];
};
/**
 * Describes the message nillion.compute.v1.invoke.OutputPartyBinding.
 * Use `create(OutputPartyBindingSchema)` to create a new message.
 */
export declare const OutputPartyBindingSchema: GenMessage<OutputPartyBinding>;
