import type { GenFile, GenService } from "@bufbuild/protobuf/codegenv1";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import type { InvokeComputeRequestSchema, InvokeComputeResponseSchema } from "./invoke_pb";
import type { ComputeStreamMessageSchema } from "./stream_pb";
import type { RetrieveResultsRequestSchema, RetrieveResultsResponseSchema } from "./retrieve_pb";
/**
 * Describes the file nillion/compute/v1/service.proto.
 */
export declare const file_nillion_compute_v1_service: GenFile;
/**
 * A service to perform compute operations.
 *
 * @generated from service nillion.compute.v1.Compute
 */
export declare const Compute: GenService<{
    /**
     * Invoke a computation.
     *
     * @generated from rpc nillion.compute.v1.Compute.InvokeCompute
     */
    invokeCompute: {
        methodKind: "unary";
        input: typeof InvokeComputeRequestSchema;
        output: typeof InvokeComputeResponseSchema;
    };
    /**
     * Start a stream of message for a specific instance of a computation.
     *
     * This is meant to be used internally by nodes in the network.
     *
     * @generated from rpc nillion.compute.v1.Compute.StreamCompute
     */
    streamCompute: {
        methodKind: "client_streaming";
        input: typeof ComputeStreamMessageSchema;
        output: typeof EmptySchema;
    };
    /**
     * Retrieve the result of a computation.
     *
     * The user invoking this operation must have been defined as an output party in the program
     * the execution was tied to.
     *
     * This call will wait for the program execution to end if it hasn't done so already. Clients must
     * wait until either a result or failure message is sent, ignoring any `Waiting` messages sent until
     * that happens.
     *
     * @generated from rpc nillion.compute.v1.Compute.RetrieveResults
     */
    retrieveResults: {
        methodKind: "server_streaming";
        input: typeof RetrieveResultsRequestSchema;
        output: typeof RetrieveResultsResponseSchema;
    };
}>;
