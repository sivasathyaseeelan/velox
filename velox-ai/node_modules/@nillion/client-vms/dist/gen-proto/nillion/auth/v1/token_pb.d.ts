import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import type { PublicKey } from "./public_key_pb";
import type { NodeId } from "../../membership/v1/cluster_pb";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file nillion/auth/v1/token.proto.
 */
export declare const file_nillion_auth_v1_token: GenFile;
/**
 * A signed authentication token.
 *
 * @generated from message nillion.auth.v1.token.SignedToken
 */
export type SignedToken = Message<"nillion.auth.v1.token.SignedToken"> & {
    /**
     * A `Token` serialized into bytes.
     *
     * @generated from field: bytes serialized_token = 1;
     */
    serializedToken: Uint8Array;
    /**
     * The public key for the private key this token is signed with.
     *
     * @generated from field: nillion.auth.v1.public_key.PublicKey public_key = 2;
     */
    publicKey?: PublicKey;
    /**
     * The serialized token signature.
     *
     * The signature must be generated using the private key corresponding to the `public_key` field
     * over `sha256(serialized_token)`.
     *
     * @generated from field: bytes signature = 3;
     */
    signature: Uint8Array;
};
/**
 * Describes the message nillion.auth.v1.token.SignedToken.
 * Use `create(SignedTokenSchema)` to create a new message.
 */
export declare const SignedTokenSchema: GenMessage<SignedToken>;
/**
 * A token.
 *
 * @generated from message nillion.auth.v1.token.Token
 */
export type Token = Message<"nillion.auth.v1.token.Token"> & {
    /**
     * A nonce that adds entropy to this token.
     *
     * The nonce must be 32 bytes long and will be considered invalid otherwise.
     *
     * @generated from field: bytes nonce = 1;
     */
    nonce: Uint8Array;
    /**
     * The identifier of the node this token is meant to be used against.
     *
     * This needs to match the target node's identity for the token to be considered valid, and is used to prevent
     * a node from taking the token and impersonating the user.
     *
     * @generated from field: nillion.membership.v1.cluster.NodeId target_identity = 2;
     */
    targetIdentity?: NodeId;
    /**
     * The timestamp at which this token expires.
     *
     * @generated from field: google.protobuf.Timestamp expires_at = 3;
     */
    expiresAt?: Timestamp;
};
/**
 * Describes the message nillion.auth.v1.token.Token.
 * Use `create(TokenSchema)` to create a new message.
 */
export declare const TokenSchema: GenMessage<Token>;
