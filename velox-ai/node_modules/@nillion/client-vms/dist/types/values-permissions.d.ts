import { type Permissions as PermissionsProtobuf } from "#/gen-proto/nillion/permissions/v1/permissions_pb";
import type { ProgramId } from "#/types/types";
import { UserId } from "#/types/user-id";
type ValuesPermissionsAsObject = {
    owner: string;
    retrieve: string[];
    update: string[];
    delete: string[];
    compute: {
        user: string;
        programIds: string[];
    }[];
};
export declare class ValuesPermissions {
    owner: UserId;
    readonly retrieve: Set<UserId>;
    readonly update: Set<UserId>;
    readonly _delete: Set<UserId>;
    readonly compute: Map<UserId, Set<ProgramId>>;
    constructor(owner: UserId, retrieve: Set<UserId>, update: Set<UserId>, _delete: Set<UserId>, compute: Map<UserId, Set<ProgramId>>);
    toProto(): PermissionsProtobuf;
    toObject(): ValuesPermissionsAsObject;
    static from(value: PermissionsProtobuf): ValuesPermissions;
}
export declare class ValuesPermissionsBuilder {
    private _owner?;
    private _retrieve;
    private _update;
    private _delete;
    private _compute;
    private constructor();
    owner(id: UserId): this;
    grantRetrieve(id: UserId): this;
    grantUpdate(id: UserId): this;
    grantDelete(id: UserId): this;
    grantCompute(id: UserId, program: ProgramId): this;
    permissions(permissions: ValuesPermissions): this;
    build(): ValuesPermissions;
    static default(owner: UserId): ValuesPermissions;
    static init(): ValuesPermissionsBuilder;
}
export {};
