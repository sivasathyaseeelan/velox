import { type Timestamp } from "@bufbuild/protobuf/wkt";
import { PartyId as WasmPartyId } from "@nillion/client-wasm";
import { z } from "zod";
import type { PriceQuoteRequest, QuoteFees, SignedQuote } from "#/gen-proto/nillion/payments/v1/quote_pb";
import { UserId } from "#/types/user-id";
export declare const TimestampToDateSchema: z.ZodEffects<z.ZodType<Timestamp, z.ZodTypeDef, Timestamp>, Date, Timestamp>;
export declare const Quote: z.ZodObject<{
    nonce: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
    fees: z.ZodType<QuoteFees, z.ZodTypeDef, QuoteFees>;
    expiresAt: z.ZodEffects<z.ZodType<Timestamp, z.ZodTypeDef, Timestamp>, Date, Timestamp>;
    request: z.ZodType<PriceQuoteRequest, z.ZodTypeDef, PriceQuoteRequest>;
    signed: z.ZodType<SignedQuote, z.ZodTypeDef, SignedQuote>;
}, "strip", z.ZodTypeAny, {
    nonce: Uint8Array;
    fees: import("@bufbuild/protobuf").Message<"nillion.payments.v1.quote.QuoteFees"> & {
        total: bigint;
        base: bigint;
        congestion: bigint;
        storage: bigint;
        preprocessing: bigint;
        compute: bigint;
    };
    expiresAt: Date;
    request: import("@bufbuild/protobuf").Message<"nillion.payments.v1.quote.PriceQuoteRequest"> & {
        operation: {
            value: import("@bufbuild/protobuf/wkt").Empty;
            case: "poolStatus";
        } | {
            value: import("#/gen-proto/nillion/payments/v1/quote_pb").StoreProgram;
            case: "storeProgram";
        } | {
            value: import("#/gen-proto/nillion/payments/v1/quote_pb").RetrieveValues;
            case: "retrieveValues";
        } | {
            value: import("#/gen-proto/nillion/payments/v1/quote_pb").RetrievePermissions;
            case: "retrievePermissions";
        } | {
            value: import("#/gen-proto/nillion/payments/v1/quote_pb").StoreValues;
            case: "storeValues";
        } | {
            value: import("#/gen-proto/nillion/payments/v1/quote_pb").InvokeCompute;
            case: "invokeCompute";
        } | {
            value: import("#/gen-proto/nillion/payments/v1/quote_pb").OverwritePermissions;
            case: "overwritePermissions";
        } | {
            value: import("#/gen-proto/nillion/payments/v1/quote_pb").UpdatePermissions;
            case: "updatePermissions";
        } | {
            case: undefined;
            value?: undefined;
        };
    };
    signed: import("@bufbuild/protobuf").Message<"nillion.payments.v1.quote.SignedQuote"> & {
        quote: Uint8Array;
        signature: Uint8Array;
    };
}, {
    nonce: Uint8Array;
    fees: import("@bufbuild/protobuf").Message<"nillion.payments.v1.quote.QuoteFees"> & {
        total: bigint;
        base: bigint;
        congestion: bigint;
        storage: bigint;
        preprocessing: bigint;
        compute: bigint;
    };
    expiresAt: import("@bufbuild/protobuf").Message<"google.protobuf.Timestamp"> & {
        seconds: bigint;
        nanos: number;
    };
    request: import("@bufbuild/protobuf").Message<"nillion.payments.v1.quote.PriceQuoteRequest"> & {
        operation: {
            value: import("@bufbuild/protobuf/wkt").Empty;
            case: "poolStatus";
        } | {
            value: import("#/gen-proto/nillion/payments/v1/quote_pb").StoreProgram;
            case: "storeProgram";
        } | {
            value: import("#/gen-proto/nillion/payments/v1/quote_pb").RetrieveValues;
            case: "retrieveValues";
        } | {
            value: import("#/gen-proto/nillion/payments/v1/quote_pb").RetrievePermissions;
            case: "retrievePermissions";
        } | {
            value: import("#/gen-proto/nillion/payments/v1/quote_pb").StoreValues;
            case: "storeValues";
        } | {
            value: import("#/gen-proto/nillion/payments/v1/quote_pb").InvokeCompute;
            case: "invokeCompute";
        } | {
            value: import("#/gen-proto/nillion/payments/v1/quote_pb").OverwritePermissions;
            case: "overwritePermissions";
        } | {
            value: import("#/gen-proto/nillion/payments/v1/quote_pb").UpdatePermissions;
            case: "updatePermissions";
        } | {
            case: undefined;
            value?: undefined;
        };
    };
    signed: import("@bufbuild/protobuf").Message<"nillion.payments.v1.quote.SignedQuote"> & {
        quote: Uint8Array;
        signature: Uint8Array;
    };
}>;
export type Quote = z.infer<typeof Quote>;
export declare class PartyId {
    readonly inner: Uint8Array;
    constructor(inner: Uint8Array);
    toBase64(): string;
    toWasm(): WasmPartyId;
    static from(id: Uint8Array): PartyId;
}
export declare const Uuid: z.ZodString;
export type Uuid = z.infer<typeof Uuid>;
export declare const TtlDays: z.ZodNumber;
export type TtlDays = z.infer<typeof TtlDays>;
export declare const PartyName: z.ZodString;
export type PartyName = z.infer<typeof PartyName>;
export declare const ProgramId: z.ZodString;
export type ProgramId = z.infer<typeof ProgramId>;
export declare const ProgramName: z.ZodString;
export type ProgramName = z.infer<typeof ProgramName>;
export declare const InputBindings: z.ZodObject<{
    party: z.ZodString;
    user: z.ZodType<UserId, z.ZodTypeDef, UserId>;
}, "strip", z.ZodTypeAny, {
    party: string;
    user: UserId;
}, {
    party: string;
    user: UserId;
}>;
export type InputBindings = z.infer<typeof InputBindings>;
export declare const OutputBindings: z.ZodObject<{
    party: z.ZodString;
    users: z.ZodArray<z.ZodType<UserId, z.ZodTypeDef, UserId>, "many">;
}, "strip", z.ZodTypeAny, {
    party: string;
    users: UserId[];
}, {
    party: string;
    users: UserId[];
}>;
export type OutputBindings = z.infer<typeof OutputBindings>;
export declare const NadaValuesRecord: z.ZodRecord<z.ZodString, z.ZodObject<{
    type: z.ZodString;
    value: z.ZodUnion<[z.ZodString, z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>]>;
}, "strip", z.ZodTypeAny, {
    value: string | Uint8Array;
    type: string;
}, {
    value: string | Uint8Array;
    type: string;
}>>;
export type NadaValuesRecord = z.infer<typeof NadaValuesRecord>;
