import type { OfflineSigner } from "@cosmjs/proto-signing";
import { z } from "zod";
import { type Cluster } from "#/gen-proto/nillion/membership/v1/cluster_pb";
import { VmClient } from "#/vm/client";
export declare const VmClientBuilderConfig: z.ZodObject<{
    bootnodeUrl: z.ZodString;
    chainUrl: z.ZodString;
    signer: z.ZodType<OfflineSigner, z.ZodTypeDef, OfflineSigner>;
    seed: z.ZodString;
}, "strip", z.ZodTypeAny, {
    signer: OfflineSigner;
    chainUrl: string;
    bootnodeUrl: string;
    seed: string;
}, {
    signer: OfflineSigner;
    chainUrl: string;
    bootnodeUrl: string;
    seed: string;
}>;
export type VmClientBuilderConfig = z.infer<typeof VmClientBuilderConfig>;
/**
 * Builder for creating a configured instance of {VmClient}.
 *
 * This builder allows setting various configuration options required to
 * initialize a client for interacting with the Nillion network.
 *
 * Example usage:
 *
 * @example
 * ```ts
 * const signer = await createSignerFromKey(Env.WalletPrivateKey);
 *
 * const client = await new VmClientBuilder()
 *   .authTokenTtl(1)
 *   .seed(Env.userSeed)
 *   .bootnodeUrl(Env.bootnodeUrl)
 *   .chainUrl(Env.nilChainUrl)
 *   .signer(signer)
 *   .build();
 * ```
 */
export declare class VmClientBuilder {
    private _bootnodeUrl?;
    private _chainUrl?;
    private _signer?;
    private _seed?;
    private _authTokenTtl?;
    /**
     * Set the Nillion network bootnode Url. This can be any node in the network.
     *
     * @param {string} url - The Url of the bootnode.
     * @returns {this} The current builder instance.
     */
    bootnodeUrl(url: string): this;
    /**
     * Set the NiLChain RPC Url.
     *
     * @param {string} url - The URL of the chain.
     * @returns {this} The current builder instance.
     */
    chainUrl(url: string): this;
    /**
     * Set the {OfflineSigner} used for signing transactions.
     *
     * @param {OfflineSigner} signer - The offline signer instance.
     * @returns {this} The current builder instance.
     */
    signer(signer: OfflineSigner): this;
    /**
     * Set the user secret seed for generating gRPC authentication tokens.
     *
     * @param {string} seed - The seed string.
     * @returns {this} The current builder instance.
     */
    seed(seed: string): this;
    /**
     * Builds and returns a configured {VmClient} instance.
     *
     * This method initializes the client with the specified configuration
     * options, connects to a bootnode to retrieve Nillion network configuration,
     * and instantiates a VmClient.
     *
     * @returns {Promise<VmClient>} A promise that resolves to a configured `VmClient` instance.
     * @throws {Error} If builder configuration is incomplete or invalid.
     */
    build(): Promise<VmClient>;
}
/**
 * Fetches cluster details from the specified bootnode Url.
 *
 * @param {string} bootnodeUrl - The Url of the bootnode to query.
 * @returns {Promise<Cluster>} A promise that resolves with the cluster details.
 */
export declare const fetchClusterDetails: (bootnodeUrl: string) => Promise<Cluster>;
