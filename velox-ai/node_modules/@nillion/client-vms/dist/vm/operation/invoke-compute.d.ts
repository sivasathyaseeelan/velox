import { type Client } from "@connectrpc/connect";
import { type NadaValue, NadaValues } from "@nillion/client-wasm";
import { Effect as E } from "effect";
import { UnknownException } from "effect/Cause";
import { z } from "zod";
import { type InvokeComputeRequest } from "#/gen-proto/nillion/compute/v1/invoke_pb";
import { Compute } from "#/gen-proto/nillion/compute/v1/service_pb";
import type { SignedReceipt } from "#/gen-proto/nillion/payments/v1/receipt_pb";
import { PartyId, ProgramId, Uuid } from "#/types/types";
import type { UserId } from "#/types/user-id";
import type { VmClient } from "#/vm/client";
import type { Operation } from "#/vm/operation/operation";
export declare const InvokeComputeConfig: z.ZodObject<{
    vm: z.ZodType<VmClient, z.ZodTypeDef, VmClient>;
    programId: z.ZodString;
    computeTimeValues: z.ZodType<NadaValues, z.ZodTypeDef, NadaValues>;
    valueIds: z.ZodArray<z.ZodString, "many">;
    inputBindings: z.ZodArray<z.ZodObject<{
        party: z.ZodString;
        user: z.ZodType<UserId, z.ZodTypeDef, UserId>;
    }, "strip", z.ZodTypeAny, {
        party: string;
        user: UserId;
    }, {
        party: string;
        user: UserId;
    }>, "many">;
    outputBindings: z.ZodArray<z.ZodObject<{
        party: z.ZodString;
        users: z.ZodArray<z.ZodType<UserId, z.ZodTypeDef, UserId>, "many">;
    }, "strip", z.ZodTypeAny, {
        party: string;
        users: UserId[];
    }, {
        party: string;
        users: UserId[];
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    vm: VmClient;
    valueIds: string[];
    inputBindings: {
        party: string;
        user: UserId;
    }[];
    outputBindings: {
        party: string;
        users: UserId[];
    }[];
    programId: string;
    computeTimeValues: NadaValues;
}, {
    vm: VmClient;
    valueIds: string[];
    inputBindings: {
        party: string;
        user: UserId;
    }[];
    outputBindings: {
        party: string;
        users: UserId[];
    }[];
    programId: string;
    computeTimeValues: NadaValues;
}>;
export type InvokeComputeConfig = z.infer<typeof InvokeComputeConfig>;
type NodeRequestOptions = {
    nodeId: PartyId;
    client: Client<typeof Compute>;
    request: InvokeComputeRequest;
};
export declare class InvokeCompute implements Operation<Uuid> {
    private readonly config;
    private constructor();
    invoke(): Promise<Uuid>;
    prepareRequestPerNode(signedReceipt: SignedReceipt): E.Effect<NodeRequestOptions, UnknownException>[];
    invokeNodeRequest(options: NodeRequestOptions): E.Effect<Uuid, UnknownException>;
    private pay;
    static new(config: InvokeComputeConfig): InvokeCompute;
}
export declare class InvokeComputeBuilder {
    private readonly vm;
    private _programId?;
    private _computeTimeValues;
    private _valueIds;
    private _inputBindings;
    private _outputBindings;
    private constructor();
    program(id: ProgramId): this;
    computeTimeValues(name: string, value: NadaValue): this;
    valueIds(...ids: Uuid[]): this;
    inputParty(party: string, user: UserId): this;
    outputParty(party: string, users: UserId[]): this;
    build(): InvokeCompute;
    static init: (vm: VmClient) => InvokeComputeBuilder;
}
export {};
