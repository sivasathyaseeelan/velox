import { type Client } from "@connectrpc/connect";
import { Effect as E } from "effect";
import type { UnknownException } from "effect/Cause";
import { z } from "zod";
import type { SignedReceipt } from "#/gen-proto/nillion/payments/v1/receipt_pb";
import { Programs } from "#/gen-proto/nillion/programs/v1/service_pb";
import { type StoreProgramRequest } from "#/gen-proto/nillion/programs/v1/store_pb";
import { type PartyId, ProgramId, ProgramName } from "#/types/types";
import type { VmClient } from "#/vm/client";
import type { Operation } from "./operation";
export declare const StoreProgramConfig: z.ZodObject<{
    vm: z.ZodType<VmClient, z.ZodTypeDef, VmClient>;
    name: z.ZodString;
    program: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
}, "strip", z.ZodTypeAny, {
    name: string;
    vm: VmClient;
    program: Uint8Array;
}, {
    name: string;
    vm: VmClient;
    program: Uint8Array;
}>;
export type StoreProgramConfig = z.infer<typeof StoreProgramConfig>;
type NodeRequestOptions = {
    nodeId: PartyId;
    client: Client<typeof Programs>;
    request: StoreProgramRequest;
};
export declare class StoreProgram implements Operation<ProgramId> {
    private readonly config;
    private constructor();
    private get payer();
    invoke(): Promise<ProgramId>;
    prepareRequestPerNode(signedReceipt: SignedReceipt): E.Effect<NodeRequestOptions, UnknownException>[];
    invokeNodeRequest(options: NodeRequestOptions): E.Effect<ProgramId, UnknownException>;
    private pay;
    static new(config: StoreProgramConfig): StoreProgram;
}
export declare class StoreProgramBuilder {
    private readonly vm;
    private _name?;
    private _program?;
    private constructor();
    name(value: ProgramName | string): this;
    program(value: Uint8Array): this;
    build(): StoreProgram;
    static init: (vm: VmClient) => StoreProgramBuilder;
}
export {};
