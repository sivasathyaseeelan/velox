import { type Client } from "@connectrpc/connect";
import { type NadaValue, NadaValues } from "@nillion/client-wasm";
import { Effect as E } from "effect";
import { UnknownException } from "effect/Cause";
import { z } from "zod";
import type { SignedReceipt } from "#/gen-proto/nillion/payments/v1/receipt_pb";
import { Values } from "#/gen-proto/nillion/values/v1/service_pb";
import { type StoreValuesRequest } from "#/gen-proto/nillion/values/v1/store_pb";
import { PartyId, TtlDays, Uuid } from "#/types/types";
import { type ValuesPermissions } from "#/types/values-permissions";
import type { VmClient } from "#/vm/client";
import type { Operation } from "#/vm/operation/operation";
export declare const StoreValuesConfig: z.ZodObject<{
    vm: z.ZodType<VmClient, z.ZodTypeDef, VmClient>;
    id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    values: z.ZodType<NadaValues, z.ZodTypeDef, NadaValues>;
    ttl: z.ZodNumber;
    permissions: z.ZodType<ValuesPermissions, z.ZodTypeDef, ValuesPermissions>;
}, "strip", z.ZodTypeAny, {
    values: NadaValues;
    permissions: ValuesPermissions;
    vm: VmClient;
    ttl: number;
    id?: string | null | undefined;
}, {
    values: NadaValues;
    permissions: ValuesPermissions;
    vm: VmClient;
    ttl: number;
    id?: string | null | undefined;
}>;
export type StoreValuesConfig = z.infer<typeof StoreValuesConfig>;
type NodeRequestOptions = {
    nodeId: PartyId;
    client: Client<typeof Values>;
    request: StoreValuesRequest;
};
export declare class StoreValues implements Operation<Uuid> {
    private readonly config;
    private constructor();
    invoke(): Promise<Uuid>;
    prepareRequestPerNode(signedReceipt: SignedReceipt): E.Effect<NodeRequestOptions, UnknownException>[];
    invokeNodeRequest(options: NodeRequestOptions): E.Effect<Uuid, UnknownException>;
    private pay;
    static new(config: StoreValuesConfig): StoreValues;
}
export declare class StoreValuesBuilder {
    private readonly vm;
    private _id?;
    private _ttl?;
    private _permissions?;
    readonly _values: NadaValues;
    private constructor();
    value(name: string, value: NadaValue): this;
    ttl(value: TtlDays): this;
    id(value: Uuid): this;
    permissions(value: ValuesPermissions): this;
    build(): StoreValues;
    static init: (vm: VmClient) => StoreValuesBuilder;
}
export {};
