import { type Client } from "@connectrpc/connect";
import { PartyShares } from "@nillion/client-wasm";
import { Effect as E } from "effect";
import type { UnknownException } from "effect/Cause";
import { z } from "zod";
import type { SignedReceipt } from "#/gen-proto/nillion/payments/v1/receipt_pb";
import { type RetrieveValuesRequest } from "#/gen-proto/nillion/values/v1/retrieve_pb";
import { Values } from "#/gen-proto/nillion/values/v1/service_pb";
import { NadaValuesRecord, type PartyId, Uuid } from "#/types/types";
import type { VmClient } from "#/vm/client";
import type { Operation } from "#/vm/operation/operation";
export declare const RetrieveValuesConfig: z.ZodObject<{
    vm: z.ZodType<VmClient, z.ZodTypeDef, VmClient>;
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    vm: VmClient;
}, {
    id: string;
    vm: VmClient;
}>;
export type RetrieveValuesConfig = z.infer<typeof RetrieveValuesConfig>;
type NodeRequestOptions = {
    nodeId: PartyId;
    client: Client<typeof Values>;
    request: RetrieveValuesRequest;
};
export declare class RetrieveValues implements Operation<NadaValuesRecord> {
    private readonly config;
    private constructor();
    invoke(): Promise<NadaValuesRecord>;
    prepareRequestPerNode(signedReceipt: SignedReceipt): E.Effect<NodeRequestOptions, UnknownException>[];
    invokeNodeRequest(options: NodeRequestOptions): E.Effect<PartyShares, UnknownException>;
    private pay;
    static new(config: RetrieveValuesConfig): RetrieveValues;
}
export declare class RetrieveValuesBuilder {
    private readonly vm;
    private _id?;
    private constructor();
    id(value: Uuid): this;
    build(): RetrieveValues;
    static init: (vm: VmClient) => RetrieveValuesBuilder;
}
export {};
