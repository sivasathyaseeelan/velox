import { type Client } from "@connectrpc/connect";
import { Effect as E } from "effect";
import type { UnknownException } from "effect/Cause";
import { z } from "zod";
import { type PoolStatusRequest, type PoolStatusResponse } from "#/gen-proto/nillion/leader_queries/v1/pool_status_pb";
import { LeaderQueries } from "#/gen-proto/nillion/leader_queries/v1/service_pb";
import type { SignedReceipt } from "#/gen-proto/nillion/payments/v1/receipt_pb";
import type { VmClient } from "#/vm/client";
import type { Operation } from "#/vm/operation/operation";
export declare const QueryPoolStatusConfig: z.ZodObject<{
    vm: z.ZodType<VmClient, z.ZodTypeDef, VmClient>;
}, "strip", z.ZodTypeAny, {
    vm: VmClient;
}, {
    vm: VmClient;
}>;
export type QueryPoolStatusConfig = z.infer<typeof QueryPoolStatusConfig>;
type NodeRequestOptions = {
    client: Client<typeof LeaderQueries>;
    request: PoolStatusRequest;
};
export declare const PreprocessingOffsets: z.ZodObject<{
    element: z.ZodNumber;
    start: z.ZodBigInt;
    end: z.ZodBigInt;
}, "strip", z.ZodTypeAny, {
    element: number;
    start: bigint;
    end: bigint;
}, {
    element: number;
    start: bigint;
    end: bigint;
}>;
export type PreprocessingOffsets = z.infer<typeof PreprocessingOffsets>;
export declare const PoolStatus: z.ZodObject<{
    offsets: z.ZodArray<z.ZodObject<{
        element: z.ZodNumber;
        start: z.ZodBigInt;
        end: z.ZodBigInt;
    }, "strip", z.ZodTypeAny, {
        element: number;
        start: bigint;
        end: bigint;
    }, {
        element: number;
        start: bigint;
        end: bigint;
    }>, "many">;
    preprocessingActive: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    offsets: {
        element: number;
        start: bigint;
        end: bigint;
    }[];
    preprocessingActive: boolean;
}, {
    offsets: {
        element: number;
        start: bigint;
        end: bigint;
    }[];
    preprocessingActive: boolean;
}>;
export type PoolStatus = z.infer<typeof PoolStatus>;
export declare class QueryPoolStatus implements Operation<PoolStatus> {
    private readonly config;
    private constructor();
    invoke(): Promise<PoolStatus>;
    prepareLeaderRequest(signedReceipt: SignedReceipt): E.Effect<NodeRequestOptions, UnknownException>;
    invokeNodeRequest(options: NodeRequestOptions): E.Effect<PoolStatusResponse, UnknownException>;
    pay(): Promise<SignedReceipt>;
    static new(config: QueryPoolStatusConfig): QueryPoolStatus;
}
export declare class QueryPoolStatusBuilder {
    private readonly vm;
    private constructor();
    build(): QueryPoolStatus;
    static init: (vm: VmClient) => QueryPoolStatusBuilder;
}
export {};
