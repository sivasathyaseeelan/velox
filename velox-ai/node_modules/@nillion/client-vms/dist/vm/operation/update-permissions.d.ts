import { type Client } from "@connectrpc/connect";
import { Effect as E } from "effect";
import type { UnknownException } from "effect/Cause";
import { z } from "zod";
import type { SignedReceipt } from "#/gen-proto/nillion/payments/v1/receipt_pb";
import { Permissions as PermissionsService } from "#/gen-proto/nillion/permissions/v1/service_pb";
import { type UpdatePermissionsRequest } from "#/gen-proto/nillion/permissions/v1/update_pb";
import { ComputePermissionCommand, ComputePermissionCommandBuilder } from "#/types/compute-permission-command";
import { PermissionCommand, PermissionCommandBuilder } from "#/types/permission-command";
import { type PartyId, type ProgramId, Uuid } from "#/types/types";
import type { UserId } from "#/types/user-id";
import type { VmClient } from "#/vm/client";
import type { Operation } from "#/vm/operation/operation";
export declare const UpdatePermissionsConfig: z.ZodObject<{
    vm: z.ZodType<VmClient, z.ZodTypeDef, VmClient>;
    id: z.ZodString;
    retrieve: z.ZodType<PermissionCommand, z.ZodTypeDef, PermissionCommand>;
    update: z.ZodType<PermissionCommand, z.ZodTypeDef, PermissionCommand>;
    _delete: z.ZodType<PermissionCommand, z.ZodTypeDef, PermissionCommand>;
    compute: z.ZodType<ComputePermissionCommand, z.ZodTypeDef, ComputePermissionCommand>;
}, "strip", z.ZodTypeAny, {
    id: string;
    retrieve: PermissionCommand;
    update: PermissionCommand;
    compute: ComputePermissionCommand;
    vm: VmClient;
    _delete: PermissionCommand;
}, {
    id: string;
    retrieve: PermissionCommand;
    update: PermissionCommand;
    compute: ComputePermissionCommand;
    vm: VmClient;
    _delete: PermissionCommand;
}>;
export type UpdatePermissionsConfig = z.infer<typeof UpdatePermissionsConfig>;
type NodeRequestOptions = {
    nodeId: PartyId;
    client: Client<typeof PermissionsService>;
    request: UpdatePermissionsRequest;
};
export declare class UpdatePermissions implements Operation<Uuid> {
    private readonly config;
    private constructor();
    invoke(): Promise<Uuid>;
    prepareRequestPerNode(signedReceipt: SignedReceipt): E.Effect<NodeRequestOptions, UnknownException>[];
    invokeNodeRequest(options: NodeRequestOptions): E.Effect<Uuid, UnknownException>;
    private pay;
    static new(config: UpdatePermissionsConfig): UpdatePermissions;
}
type UpdatePermissionsAsObject = {
    valuesId?: string;
    retrieve: {
        grant: string[];
        revoke: string[];
    };
    update: {
        grant: string[];
        revoke: string[];
    };
    delete: {
        grant: string[];
        revoke: string[];
    };
    compute: {
        grant: Map<string, string[]>;
        revoke: Map<string, string[]>;
    };
};
export declare class UpdatePermissionsBuilder {
    private readonly vm;
    private _valuesId?;
    private _retrieve;
    private _update;
    private _delete;
    private _compute;
    private constructor();
    valuesId(value: Uuid): this;
    retrieve(value: PermissionCommandBuilder): this;
    update(value: PermissionCommandBuilder): this;
    delete(value: PermissionCommandBuilder): this;
    compute(value: ComputePermissionCommandBuilder): this;
    grantRetrieve(id: UserId): this;
    revokeRetrieve(id: UserId): this;
    grantUpdate(id: UserId): this;
    revokeUpdate(id: UserId): this;
    grantDelete(id: UserId): this;
    revokeDelete(id: UserId): this;
    grantCompute(id: UserId, program: ProgramId): this;
    revokeCompute(id: UserId, program: ProgramId): this;
    toObject(): UpdatePermissionsAsObject;
    build(): UpdatePermissions;
    static init: (vm: VmClient) => UpdatePermissionsBuilder;
}
export {};
