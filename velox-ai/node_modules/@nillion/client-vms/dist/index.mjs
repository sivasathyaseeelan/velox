// src/logger.ts
import debug from "debug";
var Log = debug("@nillion/vms");

// src/payment/builder.ts
import { createClient } from "@connectrpc/connect";
import { Registry } from "@cosmjs/proto-signing";
import { GasPrice, SigningStargateClient as SigningStargateClient2 } from "@cosmjs/stargate";
import { z as z5 } from "zod";

// src/gen-proto/nillion/payments/v1/service_pb.ts
import { fileDesc as fileDesc4, serviceDesc } from "@bufbuild/protobuf/codegenv1";

// src/gen-proto/nillion/payments/v1/quote_pb.ts
import { fileDesc as fileDesc2, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_empty, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";

// src/gen-proto/nillion/preprocessing/v1/element_pb.ts
import { enumDesc, fileDesc } from "@bufbuild/protobuf/codegenv1";
var file_nillion_preprocessing_v1_element = /* @__PURE__ */ fileDesc("CiZuaWxsaW9uL3ByZXByb2Nlc3NpbmcvdjEvZWxlbWVudC5wcm90bxIgbmlsbGlvbi5wcmVwcm9jZXNzaW5nLnYxLmVsZW1lbnQq8wEKFFByZXByb2Nlc3NpbmdFbGVtZW50EgkKBUFMUEhBEAASCgoGTEFNQkRBEAESCwoHQ09NUEFSRRACEhsKF0RJVklTSU9OX1NFQ1JFVF9ESVZJU09SEAMSGgoWRVFVQUxJVFlfU0VDUkVUX09VVFBVVBAEEhoKFkVRVUFMSVRZX1BVQkxJQ19PVVRQVVQQBRIVChFTSEFSRV9UT19QQVJUSUNMRRAGEgoKBk1PRFVMTxAHEgkKBVRSVU5DEAgSDAoIVFJVTkNfUFIQCRISCg5SQU5ET01fSU5URUdFUhAKEhIKDlJBTkRPTV9CT09MRUFOEAtC2AEKJGNvbS5uaWxsaW9uLnByZXByb2Nlc3NpbmcudjEuZWxlbWVudEIMRWxlbWVudFByb3RvUAGiAgROUFZFqgIgTmlsbGlvbi5QcmVwcm9jZXNzaW5nLlYxLkVsZW1lbnTKAiBOaWxsaW9uXFByZXByb2Nlc3NpbmdcVjFcRWxlbWVudOICLE5pbGxpb25cUHJlcHJvY2Vzc2luZ1xWMVxFbGVtZW50XEdQQk1ldGFkYXRh6gIjTmlsbGlvbjo6UHJlcHJvY2Vzc2luZzo6VjE6OkVsZW1lbnRiBnByb3RvMw");

// src/gen-proto/nillion/payments/v1/quote_pb.ts
var file_nillion_payments_v1_quote = /* @__PURE__ */ fileDesc2("Ch9uaWxsaW9uL3BheW1lbnRzL3YxL3F1b3RlLnByb3RvEhluaWxsaW9uLnBheW1lbnRzLnYxLnF1b3RlIskEChFQcmljZVF1b3RlUmVxdWVzdBItCgtwb29sX3N0YXR1cxgBIAEoCzIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eUgAEkAKDXN0b3JlX3Byb2dyYW0YAiABKAsyJy5uaWxsaW9uLnBheW1lbnRzLnYxLnF1b3RlLlN0b3JlUHJvZ3JhbUgAEkQKD3JldHJpZXZlX3ZhbHVlcxgDIAEoCzIpLm5pbGxpb24ucGF5bWVudHMudjEucXVvdGUuUmV0cmlldmVWYWx1ZXNIABJOChRyZXRyaWV2ZV9wZXJtaXNzaW9ucxgEIAEoCzIuLm5pbGxpb24ucGF5bWVudHMudjEucXVvdGUuUmV0cmlldmVQZXJtaXNzaW9uc0gAEj4KDHN0b3JlX3ZhbHVlcxgFIAEoCzImLm5pbGxpb24ucGF5bWVudHMudjEucXVvdGUuU3RvcmVWYWx1ZXNIABJCCg5pbnZva2VfY29tcHV0ZRgGIAEoCzIoLm5pbGxpb24ucGF5bWVudHMudjEucXVvdGUuSW52b2tlQ29tcHV0ZUgAElAKFW92ZXJ3cml0ZV9wZXJtaXNzaW9ucxgHIAEoCzIvLm5pbGxpb24ucGF5bWVudHMudjEucXVvdGUuT3ZlcndyaXRlUGVybWlzc2lvbnNIABJKChJ1cGRhdGVfcGVybWlzc2lvbnMYCCABKAsyLC5uaWxsaW9uLnBheW1lbnRzLnYxLnF1b3RlLlVwZGF0ZVBlcm1pc3Npb25zSABCCwoJb3BlcmF0aW9uIi8KC1NpZ25lZFF1b3RlEg0KBXF1b3RlGAEgASgMEhEKCXNpZ25hdHVyZRgCIAEoDCKXAgoKUHJpY2VRdW90ZRINCgVub25jZRgBIAEoDBIyCgRmZWVzGAIgASgLMiQubmlsbGlvbi5wYXltZW50cy52MS5xdW90ZS5RdW90ZUZlZXMSPQoHcmVxdWVzdBgDIAEoCzIsLm5pbGxpb24ucGF5bWVudHMudjEucXVvdGUuUHJpY2VRdW90ZVJlcXVlc3QSLgoKZXhwaXJlc19hdBgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASVwoacHJlcHJvY2Vzc2luZ19yZXF1aXJlbWVudHMYBSADKAsyMy5uaWxsaW9uLnBheW1lbnRzLnYxLnF1b3RlLlByZXByb2Nlc3NpbmdSZXF1aXJlbWVudCJ1CglRdW90ZUZlZXMSDQoFdG90YWwYASABKAQSDAoEYmFzZRgCIAEoBBISCgpjb25nZXN0aW9uGAMgASgEEg8KB3N0b3JhZ2UYBCABKAQSFQoNcHJlcHJvY2Vzc2luZxgFIAEoBBIPCgdjb21wdXRlGAYgASgEInMKDFN0b3JlUHJvZ3JhbRI8CghtZXRhZGF0YRgBIAEoCzIqLm5pbGxpb24ucGF5bWVudHMudjEucXVvdGUuUHJvZ3JhbU1ldGFkYXRhEhcKD2NvbnRlbnRzX3NoYTI1NhgCIAEoDBIMCgRuYW1lGAMgASgJIrkCCg9Qcm9ncmFtTWV0YWRhdGESFAoMcHJvZ3JhbV9zaXplGAEgASgEEhMKC21lbW9yeV9zaXplGAIgASgEEhkKEWluc3RydWN0aW9uX2NvdW50GAMgASgEElIKDGluc3RydWN0aW9ucxgEIAMoCzI8Lm5pbGxpb24ucGF5bWVudHMudjEucXVvdGUuUHJvZ3JhbU1ldGFkYXRhLkluc3RydWN0aW9uc0VudHJ5ElcKGnByZXByb2Nlc3NpbmdfcmVxdWlyZW1lbnRzGAUgAygLMjMubmlsbGlvbi5wYXltZW50cy52MS5xdW90ZS5QcmVwcm9jZXNzaW5nUmVxdWlyZW1lbnQaMwoRSW5zdHJ1Y3Rpb25zRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgEOgI4ASJyChhQcmVwcm9jZXNzaW5nUmVxdWlyZW1lbnQSRwoHZWxlbWVudBgBIAEoDjI2Lm5pbGxpb24ucHJlcHJvY2Vzc2luZy52MS5lbGVtZW50LlByZXByb2Nlc3NpbmdFbGVtZW50Eg0KBWNvdW50GAIgASgEIiMKDlJldHJpZXZlVmFsdWVzEhEKCXZhbHVlc19pZBgBIAEoDCIoChNSZXRyaWV2ZVBlcm1pc3Npb25zEhEKCXZhbHVlc19pZBgBIAEoDCIpChRPdmVyd3JpdGVQZXJtaXNzaW9ucxIRCgl2YWx1ZXNfaWQYASABKAwiJgoRVXBkYXRlUGVybWlzc2lvbnMSEQoJdmFsdWVzX2lkGAEgASgMItYBCgtTdG9yZVZhbHVlcxIXCg9wYXJ0aWNsZXNfY291bnQYASABKAQSGwoTc2VjcmV0X3NoYXJlZF9jb3VudBgCIAEoBBIbChNwdWJsaWNfdmFsdWVzX2NvdW50GAMgASgEEhAKCHR0bF9kYXlzGAQgASgNEhQKDHBheWxvYWRfc2l6ZRgFIAEoBBImCh5lY2RzYV9wcml2YXRlX2tleV9zaGFyZXNfY291bnQYBiABKAQSJAocZWNkc2Ffc2lnbmF0dXJlX3NoYXJlc19jb3VudBgHIAEoBCJACg1JbnZva2VDb21wdXRlEhIKCnByb2dyYW1faWQYASABKAkSGwoTdmFsdWVzX3BheWxvYWRfc2l6ZRgCIAEoBEKzAQodY29tLm5pbGxpb24ucGF5bWVudHMudjEucXVvdGVCClF1b3RlUHJvdG9QAaICBE5QVlGqAhlOaWxsaW9uLlBheW1lbnRzLlYxLlF1b3RlygIZTmlsbGlvblxQYXltZW50c1xWMVxRdW90ZeICJU5pbGxpb25cUGF5bWVudHNcVjFcUXVvdGVcR1BCTWV0YWRhdGHqAhxOaWxsaW9uOjpQYXltZW50czo6VjE6OlF1b3RlYgZwcm90bzM", [file_google_protobuf_empty, file_google_protobuf_timestamp, file_nillion_preprocessing_v1_element]);
var PriceQuoteRequestSchema = /* @__PURE__ */ messageDesc(file_nillion_payments_v1_quote, 0);
var PriceQuoteSchema = /* @__PURE__ */ messageDesc(file_nillion_payments_v1_quote, 2);
var ProgramMetadataSchema = /* @__PURE__ */ messageDesc(file_nillion_payments_v1_quote, 5);

// src/gen-proto/nillion/payments/v1/receipt_pb.ts
import { fileDesc as fileDesc3, messageDesc as messageDesc2 } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_empty as file_google_protobuf_empty2, file_google_protobuf_timestamp as file_google_protobuf_timestamp2 } from "@bufbuild/protobuf/wkt";
var file_nillion_payments_v1_receipt = /* @__PURE__ */ fileDesc3("CiFuaWxsaW9uL3BheW1lbnRzL3YxL3JlY2VpcHQucHJvdG8SG25pbGxpb24ucGF5bWVudHMudjEucmVjZWlwdCJmChVQYXltZW50UmVjZWlwdFJlcXVlc3QSPAoMc2lnbmVkX3F1b3RlGAEgASgLMiYubmlsbGlvbi5wYXltZW50cy52MS5xdW90ZS5TaWduZWRRdW90ZRIPCgd0eF9oYXNoGAIgASgJIjMKDVNpZ25lZFJlY2VpcHQSDwoHcmVjZWlwdBgBIAEoDBIRCglzaWduYXR1cmUYAiABKAwijwEKB1JlY2VpcHQSEgoKaWRlbnRpZmllchgBIAEoDBJACghtZXRhZGF0YRgCIAEoCzIuLm5pbGxpb24ucGF5bWVudHMudjEucmVjZWlwdC5PcGVyYXRpb25NZXRhZGF0YRIuCgpleHBpcmVzX2F0GAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCLTBAoRT3BlcmF0aW9uTWV0YWRhdGESLQoLcG9vbF9zdGF0dXMYASABKAsyFi5nb29nbGUucHJvdG9idWYuRW1wdHlIABJACg1zdG9yZV9wcm9ncmFtGAIgASgLMicubmlsbGlvbi5wYXltZW50cy52MS5xdW90ZS5TdG9yZVByb2dyYW1IABJECg9yZXRyaWV2ZV92YWx1ZXMYAyABKAsyKS5uaWxsaW9uLnBheW1lbnRzLnYxLnF1b3RlLlJldHJpZXZlVmFsdWVzSAASTgoUcmV0cmlldmVfcGVybWlzc2lvbnMYBCABKAsyLi5uaWxsaW9uLnBheW1lbnRzLnYxLnF1b3RlLlJldHJpZXZlUGVybWlzc2lvbnNIABI+CgxzdG9yZV92YWx1ZXMYBSABKAsyJi5uaWxsaW9uLnBheW1lbnRzLnYxLnF1b3RlLlN0b3JlVmFsdWVzSAASTAoOaW52b2tlX2NvbXB1dGUYBiABKAsyMi5uaWxsaW9uLnBheW1lbnRzLnYxLnJlY2VpcHQuSW52b2tlQ29tcHV0ZU1ldGFkYXRhSAASUAoVb3ZlcndyaXRlX3Blcm1pc3Npb25zGAcgASgLMi8ubmlsbGlvbi5wYXltZW50cy52MS5xdW90ZS5PdmVyd3JpdGVQZXJtaXNzaW9uc0gAEkoKEnVwZGF0ZV9wZXJtaXNzaW9ucxgIIAEoCzIsLm5pbGxpb24ucGF5bWVudHMudjEucXVvdGUuVXBkYXRlUGVybWlzc2lvbnNIAEILCglvcGVyYXRpb24inAEKFUludm9rZUNvbXB1dGVNZXRhZGF0YRI3CgVxdW90ZRgBIAEoCzIoLm5pbGxpb24ucGF5bWVudHMudjEucXVvdGUuSW52b2tlQ29tcHV0ZRJKCgdvZmZzZXRzGAIgAygLMjkubmlsbGlvbi5wYXltZW50cy52MS5yZWNlaXB0LlNlbGVjdGVkUHJlcHJvY2Vzc2luZ09mZnNldHMilwEKHFNlbGVjdGVkUHJlcHJvY2Vzc2luZ09mZnNldHMSRwoHZWxlbWVudBgBIAEoDjI2Lm5pbGxpb24ucHJlcHJvY2Vzc2luZy52MS5lbGVtZW50LlByZXByb2Nlc3NpbmdFbGVtZW50Eg0KBXN0YXJ0GAIgASgEEgsKA2VuZBgDIAEoBBISCgpiYXRjaF9zaXplGAQgASgEQr8BCh9jb20ubmlsbGlvbi5wYXltZW50cy52MS5yZWNlaXB0QgxSZWNlaXB0UHJvdG9QAaICBE5QVlKqAhtOaWxsaW9uLlBheW1lbnRzLlYxLlJlY2VpcHTKAhtOaWxsaW9uXFBheW1lbnRzXFYxXFJlY2VpcHTiAidOaWxsaW9uXFBheW1lbnRzXFYxXFJlY2VpcHRcR1BCTWV0YWRhdGHqAh5OaWxsaW9uOjpQYXltZW50czo6VjE6OlJlY2VpcHRiBnByb3RvMw", [file_google_protobuf_timestamp2, file_google_protobuf_empty2, file_nillion_payments_v1_quote, file_nillion_preprocessing_v1_element]);
var PaymentReceiptRequestSchema = /* @__PURE__ */ messageDesc2(file_nillion_payments_v1_receipt, 0);

// src/gen-proto/nillion/payments/v1/service_pb.ts
var file_nillion_payments_v1_service = /* @__PURE__ */ fileDesc4("CiFuaWxsaW9uL3BheW1lbnRzL3YxL3NlcnZpY2UucHJvdG8SE25pbGxpb24ucGF5bWVudHMudjEy4AEKCFBheW1lbnRzEmIKClByaWNlUXVvdGUSLC5uaWxsaW9uLnBheW1lbnRzLnYxLnF1b3RlLlByaWNlUXVvdGVSZXF1ZXN0GiYubmlsbGlvbi5wYXltZW50cy52MS5xdW90ZS5TaWduZWRRdW90ZRJwCg5QYXltZW50UmVjZWlwdBIyLm5pbGxpb24ucGF5bWVudHMudjEucmVjZWlwdC5QYXltZW50UmVjZWlwdFJlcXVlc3QaKi5uaWxsaW9uLnBheW1lbnRzLnYxLnJlY2VpcHQuU2lnbmVkUmVjZWlwdEKVAQoXY29tLm5pbGxpb24ucGF5bWVudHMudjFCDFNlcnZpY2VQcm90b1ABogIDTlBYqgITTmlsbGlvbi5QYXltZW50cy5WMcoCE05pbGxpb25cUGF5bWVudHNcVjHiAh9OaWxsaW9uXFBheW1lbnRzXFYxXEdQQk1ldGFkYXRh6gIVTmlsbGlvbjo6UGF5bWVudHM6OlYxYgZwcm90bzM", [file_nillion_payments_v1_quote, file_nillion_payments_v1_receipt]);
var Payments = /* @__PURE__ */ serviceDesc(file_nillion_payments_v1_service, 0);

// src/types/grpc.ts
import { z } from "zod";
var GrpcTransport = z.custom(
  (value) => Boolean(value)
);
var AuthenticatedGrpcTransport = z.custom(
  (value) => Boolean(value)
);
var GrpcClient = z.custom(
  (value) => value !== null && typeof value === "object"
);
var OfflineSignerSchema = z.custom((value) => {
  return value !== null && typeof value === "object" && "getAccounts" in value && "signDirect" in value;
});

// src/payment/client.ts
import { create as create2, fromBinary } from "@bufbuild/protobuf";
import { SigningStargateClient } from "@cosmjs/stargate";
import { z as z4 } from "zod";

// src/gen-proto/nillion/meta/v1/tx_pb.ts
import { fileDesc as fileDesc5, messageDesc as messageDesc3 } from "@bufbuild/protobuf/codegenv1";
var file_nillion_meta_v1_tx = /* @__PURE__ */ fileDesc5("ChhuaWxsaW9uL21ldGEvdjEvdHgucHJvdG8SD25pbGxpb24ubWV0YS52MSJcCglNc2dQYXlGb3ISEAoIcmVzb3VyY2UYASABKAwSFAoMZnJvbV9hZGRyZXNzGAIgASgJEicKBmFtb3VudBgDIAMoCzIXLm5pbGxpb24ubWV0YS52MS5BbW91bnQiJwoGQW1vdW50Eg0KBWRlbm9tGAEgASgJEg4KBmFtb3VudBgCIAEoCUJ8ChNjb20ubmlsbGlvbi5tZXRhLnYxQgdUeFByb3RvUAGiAgNOTViqAg9OaWxsaW9uLk1ldGEuVjHKAg9OaWxsaW9uXE1ldGFcVjHiAhtOaWxsaW9uXE1ldGFcVjFcR1BCTWV0YWRhdGHqAhFOaWxsaW9uOjpNZXRhOjpWMWIGcHJvdG8z");
var MsgPayForSchema = /* @__PURE__ */ messageDesc3(file_nillion_meta_v1_tx, 0);

// src/types/types.ts
import { timestampDate } from "@bufbuild/protobuf/wkt";
import { PartyId as WasmPartyId } from "@nillion/client-wasm";
import { z as z2 } from "zod";

// src/types/user-id.ts
import { create } from "@bufbuild/protobuf";
import { sha256 } from "@noble/hashes/sha2";

// src/gen-proto/nillion/auth/v1/user_pb.ts
import { fileDesc as fileDesc6, messageDesc as messageDesc4 } from "@bufbuild/protobuf/codegenv1";
var file_nillion_auth_v1_user = /* @__PURE__ */ fileDesc6("ChpuaWxsaW9uL2F1dGgvdjEvdXNlci5wcm90bxIUbmlsbGlvbi5hdXRoLnYxLnVzZXIiGgoGVXNlcklkEhAKCGNvbnRlbnRzGAEgASgMQpkBChhjb20ubmlsbGlvbi5hdXRoLnYxLnVzZXJCCVVzZXJQcm90b1ABogIETkFWVaoCFE5pbGxpb24uQXV0aC5WMS5Vc2VyygIUTmlsbGlvblxBdXRoXFYxXFVzZXLiAiBOaWxsaW9uXEF1dGhcVjFcVXNlclxHUEJNZXRhZGF0YeoCF05pbGxpb246OkF1dGg6OlYxOjpVc2VyYgZwcm90bzM");
var UserIdSchema = /* @__PURE__ */ messageDesc4(file_nillion_auth_v1_user, 0);

// src/types/user-id.ts
var UserId = class _UserId {
  constructor(inner) {
    this.inner = inner;
    if (inner.length !== 20) {
      throw new Error(
        `Expected Uint8Array length to be 20 but it was ${inner.length}`
      );
    }
  }
  toHex() {
    return Array.from(this.inner).map((b) => b.toString(16).padStart(2, "0")).join("");
  }
  toProto() {
    return create(UserIdSchema, { contents: this.inner });
  }
  static fromProto(id) {
    return new _UserId(id.contents);
  }
  static from(key) {
    const hash = sha256(key.contents);
    return new _UserId(hash.slice(-20));
  }
};

// src/types/types.ts
var TimestampToDateSchema = z2.custom(
  (value) => value !== null && typeof value === "object" && "seconds" in value && "nanos" in value && "$typeName" in value && value.$typeName === "google.protobuf.Timestamp"
).transform((timestamp) => timestampDate(timestamp));
var Quote = z2.object({
  nonce: z2.custom(),
  fees: z2.custom(),
  expiresAt: TimestampToDateSchema,
  request: z2.custom(),
  signed: z2.custom((value) => {
    return value !== null && typeof value === "object" && "quote" in value && "signature" in value;
  })
});
var PartyId = class _PartyId {
  constructor(inner) {
    this.inner = inner;
  }
  toBase64() {
    return btoa(String.fromCharCode(...this.inner));
  }
  toWasm() {
    return new WasmPartyId(this.inner);
  }
  static from(id) {
    return new _PartyId(id);
  }
};
var Uuid = z2.string().uuid();
var TtlDays = z2.number().positive();
var PartyName = z2.string().min(1);
var ProgramId = z2.string().min(100);
var ProgramName = z2.string().regex(/[a-zA-Z0-9+.:_-]{1,128}/);
var InputBindings = z2.object({
  party: PartyName,
  user: z2.instanceof(UserId)
});
var OutputBindings = z2.object({
  party: PartyName,
  users: z2.array(z2.instanceof(UserId))
});
var NadaValuesRecord = z2.record(
  z2.object({
    type: z2.string(),
    value: z2.union([z2.string(), z2.instanceof(Uint8Array)])
  })
);

// src/payment/types.ts
import { z as z3 } from "zod";
var TxHash = z3.string().length(64).base64().brand();
var NilChainAddressPrefix = "nillion";
var NilChainAddress = z3.string().length(46).startsWith(NilChainAddressPrefix).brand();
var NilToken = {
  Unil: "unil",
  asUnil: (amount) => `${String(amount)}${NilToken.Unil}`
};
var NilChainProtobufTypeUrl = "/nillion.meta.v1.MsgPayFor";
var PrivateKeyBase16 = z3.string().length(64).brand();

// src/payment/client.ts
var PaymentClientConfig = z4.object({
  address: NilChainAddress,
  chain: z4.custom(
    (value) => value instanceof SigningStargateClient
  ),
  leader: GrpcClient
});
var PaymentClient = class {
  constructor(config) {
    this.config = config;
    this.address = config.address;
    this.chain = config.chain;
    this.leader = config.leader;
  }
  address;
  chain;
  leader;
  async payForOperation(request) {
    const quote = await this.quote(request);
    const txHash = await this.payOnChain(quote);
    return await this.validate(quote, txHash);
  }
  async quote(request) {
    const signed = await this.leader.priceQuote(request);
    const quotePb = fromBinary(PriceQuoteSchema, signed.quote);
    const quote = Quote.parse(
      { ...quotePb, request, signed },
      { path: ["client.quote"] }
    );
    Log(
      "Quoted %s unil for %s",
      quote.fees.total.toString(),
      request.operation.case
    );
    return quote;
  }
  async payOnChain(quote) {
    const amount = String(quote.fees.total);
    const value = create2(MsgPayForSchema, {
      fromAddress: this.address,
      resource: quote.nonce,
      amount: [{ denom: NilToken.Unil, amount }]
    });
    const result = await this.chain.signAndBroadcast(
      this.address,
      [{ typeUrl: NilChainProtobufTypeUrl, value }],
      "auto"
    );
    const hash = TxHash.parse(result.transactionHash);
    Log("Paid %d unil hash: %s", amount, hash);
    return hash;
  }
  async validate(quote, txHash) {
    const request = create2(PaymentReceiptRequestSchema, {
      signedQuote: quote.signed,
      txHash
    });
    const receipt = await this.leader.paymentReceipt(request);
    Log("Validated payment with cluster");
    return receipt;
  }
};

// src/payment/grpc-compat.ts
import { create as create3 } from "@bufbuild/protobuf";
import { BinaryWriter } from "@bufbuild/protobuf/wire";
var MsgPayForCompatWrapper = {
  // @ts-expect-error see MsgPayForCompatWrapper comment
  encode: (message, writer = new BinaryWriter()) => {
    if (message.resource.length > 0) {
      writer.uint32(10).bytes(message.resource);
    }
    if (message.fromAddress !== "") {
      writer.uint32(18).string(message.fromAddress);
    }
    for (const amount of message.amount) {
      const amountWriter = new BinaryWriter();
      if (amount.denom !== "") {
        amountWriter.uint32(10).string(amount.denom);
      }
      if (amount.amount !== "") {
        amountWriter.uint32(18).string(amount.amount);
      }
      writer.uint32(26).bytes(amountWriter.finish());
    }
    return writer;
  },
  // @ts-expect-error see MsgPayForCompatWrapper comment
  decode: (_input, _length) => {
    throw new Error("MsgPayForCompatWrapper: decode not implemented");
  },
  fromPartial: (object) => {
    return create3(MsgPayForSchema, {
      resource: object.resource,
      fromAddress: object.fromAddress,
      amount: object.amount
    });
  }
};

// src/payment/builder.ts
var PaymentClientBuilderConfig = z5.object({
  signer: OfflineSignerSchema,
  chainUrl: z5.string().url("Invalid chain url"),
  transport: GrpcTransport
});
var PaymentClientBuilder = class {
  _signer;
  _chainUrl;
  _transport;
  chainUrl(url) {
    this._chainUrl = url;
    return this;
  }
  signer(signer) {
    this._signer = signer;
    return this;
  }
  leader(transport) {
    this._transport = transport;
    return this;
  }
  async build() {
    const { signer, chainUrl, transport } = PaymentClientBuilderConfig.parse({
      signer: this._signer,
      chainUrl: this._chainUrl,
      transport: this._transport
    });
    const registry = new Registry();
    registry.register(NilChainProtobufTypeUrl, MsgPayForCompatWrapper);
    const accounts = await signer.getAccounts();
    if (accounts.length === 0) {
      throw new Error("No accounts on the offline signer");
    }
    const address = accounts[0]?.address ?? "";
    const chain = await SigningStargateClient2.connectWithSigner(
      z5.string().url().parse(chainUrl),
      signer,
      {
        gasPrice: GasPrice.fromString(NilToken.asUnil(0)),
        registry
      }
    );
    const leader = createClient(Payments, transport);
    const config = PaymentClientConfig.parse({
      address,
      chain,
      leader
    });
    return new PaymentClient(config);
  }
};

// src/payment/wallet.ts
import {
  DirectSecp256k1Wallet
} from "@cosmjs/proto-signing";
var createSignerFromKey = async (key) => {
  const privateKey = new Uint8Array(key.length / 2);
  for (let i = 0, j = 0; i < key.length; i += 2, j++) {
    privateKey[j] = Number.parseInt(key.slice(i, i + 2), 16);
  }
  return await DirectSecp256k1Wallet.fromKey(privateKey, NilChainAddressPrefix);
};

// src/types/compute-permission-command.ts
import { create as create4 } from "@bufbuild/protobuf";

// src/gen-proto/nillion/permissions/v1/permissions_pb.ts
import { fileDesc as fileDesc7, messageDesc as messageDesc5 } from "@bufbuild/protobuf/codegenv1";
var file_nillion_permissions_v1_permissions = /* @__PURE__ */ fileDesc7("CihuaWxsaW9uL3Blcm1pc3Npb25zL3YxL3Blcm1pc3Npb25zLnByb3RvEiJuaWxsaW9uLnBlcm1pc3Npb25zLnYxLnBlcm1pc3Npb25zIo8CCgtQZXJtaXNzaW9ucxIrCgVvd25lchgBIAEoCzIcLm5pbGxpb24uYXV0aC52MS51c2VyLlVzZXJJZBIuCghyZXRyaWV2ZRgCIAMoCzIcLm5pbGxpb24uYXV0aC52MS51c2VyLlVzZXJJZBIsCgZ1cGRhdGUYAyADKAsyHC5uaWxsaW9uLmF1dGgudjEudXNlci5Vc2VySWQSLAoGZGVsZXRlGAQgAygLMhwubmlsbGlvbi5hdXRoLnYxLnVzZXIuVXNlcklkEkcKB2NvbXB1dGUYBSADKAsyNi5uaWxsaW9uLnBlcm1pc3Npb25zLnYxLnBlcm1pc3Npb25zLkNvbXB1dGVQZXJtaXNzaW9ucyJVChJDb21wdXRlUGVybWlzc2lvbnMSKgoEdXNlchgBIAEoCzIcLm5pbGxpb24uYXV0aC52MS51c2VyLlVzZXJJZBITCgtwcm9ncmFtX2lkcxgCIAMoCULmAQomY29tLm5pbGxpb24ucGVybWlzc2lvbnMudjEucGVybWlzc2lvbnNCEFBlcm1pc3Npb25zUHJvdG9QAaICBE5QVlCqAiJOaWxsaW9uLlBlcm1pc3Npb25zLlYxLlBlcm1pc3Npb25zygIiTmlsbGlvblxQZXJtaXNzaW9uc1xWMVxQZXJtaXNzaW9uc+ICLk5pbGxpb25cUGVybWlzc2lvbnNcVjFcUGVybWlzc2lvbnNcR1BCTWV0YWRhdGHqAiVOaWxsaW9uOjpQZXJtaXNzaW9uczo6VjE6OlBlcm1pc3Npb25zYgZwcm90bzM", [file_nillion_auth_v1_user]);
var PermissionsSchema = /* @__PURE__ */ messageDesc5(file_nillion_permissions_v1_permissions, 0);
var ComputePermissionsSchema = /* @__PURE__ */ messageDesc5(file_nillion_permissions_v1_permissions, 1);

// src/gen-proto/nillion/permissions/v1/update_pb.ts
import { fileDesc as fileDesc8, messageDesc as messageDesc6 } from "@bufbuild/protobuf/codegenv1";
var file_nillion_permissions_v1_update = /* @__PURE__ */ fileDesc8("CiNuaWxsaW9uL3Blcm1pc3Npb25zL3YxL3VwZGF0ZS5wcm90bxIdbmlsbGlvbi5wZXJtaXNzaW9ucy52MS51cGRhdGUi8AIKGFVwZGF0ZVBlcm1pc3Npb25zUmVxdWVzdBJCCg5zaWduZWRfcmVjZWlwdBgBIAEoCzIqLm5pbGxpb24ucGF5bWVudHMudjEucmVjZWlwdC5TaWduZWRSZWNlaXB0EkIKCHJldHJpZXZlGAIgASgLMjAubmlsbGlvbi5wZXJtaXNzaW9ucy52MS51cGRhdGUuUGVybWlzc2lvbkNvbW1hbmQSQAoGdXBkYXRlGAMgASgLMjAubmlsbGlvbi5wZXJtaXNzaW9ucy52MS51cGRhdGUuUGVybWlzc2lvbkNvbW1hbmQSQAoGZGVsZXRlGAQgASgLMjAubmlsbGlvbi5wZXJtaXNzaW9ucy52MS51cGRhdGUuUGVybWlzc2lvbkNvbW1hbmQSSAoHY29tcHV0ZRgFIAEoCzI3Lm5pbGxpb24ucGVybWlzc2lvbnMudjEudXBkYXRlLkNvbXB1dGVQZXJtaXNzaW9uQ29tbWFuZCJuChFQZXJtaXNzaW9uQ29tbWFuZBIrCgVncmFudBgBIAMoCzIcLm5pbGxpb24uYXV0aC52MS51c2VyLlVzZXJJZBIsCgZyZXZva2UYAiADKAsyHC5uaWxsaW9uLmF1dGgudjEudXNlci5Vc2VySWQiqQEKGENvbXB1dGVQZXJtaXNzaW9uQ29tbWFuZBJFCgVncmFudBgBIAMoCzI2Lm5pbGxpb24ucGVybWlzc2lvbnMudjEucGVybWlzc2lvbnMuQ29tcHV0ZVBlcm1pc3Npb25zEkYKBnJldm9rZRgCIAMoCzI2Lm5pbGxpb24ucGVybWlzc2lvbnMudjEucGVybWlzc2lvbnMuQ29tcHV0ZVBlcm1pc3Npb25zQsgBCiFjb20ubmlsbGlvbi5wZXJtaXNzaW9ucy52MS51cGRhdGVCC1VwZGF0ZVByb3RvUAGiAgROUFZVqgIdTmlsbGlvbi5QZXJtaXNzaW9ucy5WMS5VcGRhdGXKAh1OaWxsaW9uXFBlcm1pc3Npb25zXFYxXFVwZGF0ZeICKU5pbGxpb25cUGVybWlzc2lvbnNcVjFcVXBkYXRlXEdQQk1ldGFkYXRh6gIgTmlsbGlvbjo6UGVybWlzc2lvbnM6OlYxOjpVcGRhdGViBnByb3RvMw", [file_nillion_auth_v1_user, file_nillion_payments_v1_receipt, file_nillion_permissions_v1_permissions]);
var UpdatePermissionsRequestSchema = /* @__PURE__ */ messageDesc6(file_nillion_permissions_v1_update, 0);
var PermissionCommandSchema = /* @__PURE__ */ messageDesc6(file_nillion_permissions_v1_update, 1);
var ComputePermissionCommandSchema = /* @__PURE__ */ messageDesc6(file_nillion_permissions_v1_update, 2);

// src/types/compute-permission-command.ts
var ComputePermissionCommand = class {
  constructor(grant, revoke) {
    this.grant = grant;
    this.revoke = revoke;
  }
  toProto() {
    return create4(ComputePermissionCommandSchema, {
      grant: Array.from(this.grant).map(
        ([id, programIds]) => create4(ComputePermissionsSchema, {
          user: id.toProto(),
          programIds: Array.from(programIds)
        })
      ),
      revoke: Array.from(this.revoke).map(
        ([id, programIds]) => create4(ComputePermissionsSchema, {
          user: id.toProto(),
          programIds: Array.from(programIds)
        })
      )
    });
  }
};
var ComputePermissionCommandBuilder = class _ComputePermissionCommandBuilder {
  constructor(_grant = /* @__PURE__ */ new Map(), _revoke = /* @__PURE__ */ new Map()) {
    this._grant = _grant;
    this._revoke = _revoke;
  }
  grant(id, program) {
    if (this._revoke.has(id)) {
      throw new Error(
        `Cannot grant and revoke the same user id: ${id.toHex()}`
      );
    }
    const entry = this._grant.get(id) ?? /* @__PURE__ */ new Set();
    entry.add(program);
    this._grant.set(id, entry);
    return this;
  }
  revoke(id, program) {
    if (this._grant.has(id)) {
      throw new Error(
        `Cannot grant and revoke the same user id: ${id.toHex()}`
      );
    }
    const entry = this._revoke.get(id) ?? /* @__PURE__ */ new Set();
    entry.add(program);
    this._revoke.set(id, entry);
    return this;
  }
  toObject() {
    return {
      grant: convertMapSetToMapArray(this._grant),
      revoke: convertMapSetToMapArray(this._revoke)
    };
  }
  build() {
    return new ComputePermissionCommand(this._grant, this._revoke);
  }
  static init() {
    return new _ComputePermissionCommandBuilder();
  }
};
var convertMapSetToMapArray = (map) => {
  return new Map(
    Array.from(map.entries()).map(([userId, programSet]) => [
      userId.toString(),
      Array.from(programSet).map((program) => program.toString())
    ])
  );
};

// src/types/permission-command.ts
import { create as create5 } from "@bufbuild/protobuf";
var PermissionCommand = class _PermissionCommand {
  constructor(grant, revoke) {
    this.grant = grant;
    this.revoke = revoke;
  }
  toProto() {
    return create5(PermissionCommandSchema, {
      grant: Array.from(this.grant).map((id) => id.toProto()),
      revoke: Array.from(this.revoke).map((id) => id.toProto())
    });
  }
  static from(value) {
    const grant = new Set(value.grant.map((id) => UserId.fromProto(id)));
    const revoke = new Set(value.revoke.map((id) => UserId.fromProto(id)));
    return new _PermissionCommand(grant, revoke);
  }
};
var PermissionCommandBuilder = class _PermissionCommandBuilder {
  constructor(_grant = /* @__PURE__ */ new Set(), _revoke = /* @__PURE__ */ new Set()) {
    this._grant = _grant;
    this._revoke = _revoke;
  }
  grant(value) {
    if (this._revoke.has(value)) {
      throw new Error(
        `Cannot grant and revoke the same user id: ${value.toHex()}`
      );
    }
    this._grant.add(value);
    return this;
  }
  revoke(value) {
    if (this._grant.has(value)) {
      throw new Error(
        `Cannot grant and revoke the same user id: ${value.toHex()}`
      );
    }
    this._revoke.add(value);
    return this;
  }
  toObject() {
    return {
      grant: Array.from(this._grant).map((u) => u.toHex()),
      revoke: Array.from(this._revoke).map((u) => u.toHex())
    };
  }
  build() {
    return new PermissionCommand(this._grant, this._revoke);
  }
  static init() {
    return new _PermissionCommandBuilder();
  }
};

// src/types/values-permissions.ts
import { create as create6 } from "@bufbuild/protobuf";

// src/util.ts
import { Effect as E, pipe } from "effect";
import { UnknownException } from "effect/Cause";
var collapse = (list) => {
  return pipe(
    E.succeed(list),
    E.filterOrFail(
      (ls) => ls.length > 0,
      () => new UnknownException("Empty list")
    ),
    E.map((ls) => ({
      first: ls[0],
      asStrings: ls.map((e) => JSON.stringify(e))
    })),
    E.filterOrFail(
      ({ asStrings }) => asStrings.every((str) => str === asStrings[0]),
      () => new UnknownException("Not all elements are equal")
    ),
    E.map(() => list[0])
  );
};
function assertIsDefined(value, name) {
  if (value === null || value === void 0) {
    throw new Error(`Expected ${name} to be defined but got ${value}`);
  }
}

// src/types/values-permissions.ts
var ValuesPermissions = class _ValuesPermissions {
  constructor(owner, retrieve, update, _delete, compute) {
    this.owner = owner;
    this.retrieve = retrieve;
    this.update = update;
    this._delete = _delete;
    this.compute = compute;
  }
  toProto() {
    return create6(PermissionsSchema, {
      owner: this.owner.toProto(),
      retrieve: Array.from(this.retrieve.values()).map((e) => e.toProto()),
      update: Array.from(this.update.values()).map((e) => e.toProto()),
      delete: Array.from(this._delete.values()).map((e) => e.toProto())
    });
  }
  toObject() {
    return {
      owner: this.owner.toHex(),
      retrieve: Array.from(this.retrieve.values()).map((u) => u.toHex()),
      update: Array.from(this.update.values()).map((u) => u.toHex()),
      delete: Array.from(this._delete.values()).map((u) => u.toHex()),
      compute: Array.from(this.compute.entries()).map(([user, programIds]) => ({
        user: user.toHex(),
        programIds: Array.from(programIds)
      }))
    };
  }
  static from(value) {
    assertIsDefined(value.owner, "owner");
    const owner = UserId.fromProto(value.owner);
    const retrieve = new Set(value.retrieve.map((id) => UserId.fromProto(id)));
    const update = new Set(value.update.map((id) => UserId.fromProto(id)));
    const _delete = new Set(value.delete.map((id) => UserId.fromProto(id)));
    const compute = /* @__PURE__ */ new Map();
    for (const perms of value.compute) {
      assertIsDefined(perms.user, "user");
      compute.set(UserId.fromProto(perms.user), new Set(perms.programIds));
    }
    return new _ValuesPermissions(owner, retrieve, update, _delete, compute);
  }
};
var ValuesPermissionsBuilder = class _ValuesPermissionsBuilder {
  constructor(_owner, _retrieve = /* @__PURE__ */ new Set(), _update = /* @__PURE__ */ new Set(), _delete = /* @__PURE__ */ new Set(), _compute = /* @__PURE__ */ new Map()) {
    this._owner = _owner;
    this._retrieve = _retrieve;
    this._update = _update;
    this._delete = _delete;
    this._compute = _compute;
  }
  owner(id) {
    this._owner = id;
    return this;
  }
  grantRetrieve(id) {
    this._retrieve.add(id);
    return this;
  }
  grantUpdate(id) {
    this._update.add(id);
    return this;
  }
  grantDelete(id) {
    this._delete.add(id);
    return this;
  }
  grantCompute(id, program) {
    const entry = this._compute.get(id) ?? /* @__PURE__ */ new Set();
    entry.add(program);
    this._compute.set(id, entry);
    return this;
  }
  permissions(permissions) {
    this._owner = permissions.owner;
    this._retrieve = permissions.retrieve;
    this._update = permissions.update;
    this._delete = permissions.update;
    this._compute = permissions.compute;
    return this;
  }
  build() {
    assertIsDefined(this._owner, "_owner");
    return new ValuesPermissions(
      this._owner,
      this._retrieve,
      this._update,
      this._delete,
      this._compute
    );
  }
  static default(owner) {
    return new ValuesPermissions(
      owner,
      /* @__PURE__ */ new Set([owner]),
      /* @__PURE__ */ new Set([owner]),
      /* @__PURE__ */ new Set([owner]),
      /* @__PURE__ */ new Map()
    );
  }
  static init() {
    return new _ValuesPermissionsBuilder();
  }
};

// src/vm/builder.ts
import { createClient as createClient12 } from "@connectrpc/connect";
import { createGrpcWebTransport } from "@connectrpc/connect-web";
import { SecretMasker as SecretMasker2 } from "@nillion/client-wasm";
import { z as z17 } from "zod";

// src/auth.ts
import { create as create7, fromBinary as fromBinary2, toBinary } from "@bufbuild/protobuf";
import { timestampDate as timestampDate2, timestampFromDate } from "@bufbuild/protobuf/wkt";
import { secp256k1 } from "@noble/curves/secp256k1";
import { sha256 as sha2562 } from "@noble/hashes/sha2";
import { randomBytes } from "@noble/hashes/utils";

// src/gen-proto/nillion/auth/v1/public_key_pb.ts
import { enumDesc as enumDesc2, fileDesc as fileDesc9, messageDesc as messageDesc7 } from "@bufbuild/protobuf/codegenv1";
var file_nillion_auth_v1_public_key = /* @__PURE__ */ fileDesc9("CiBuaWxsaW9uL2F1dGgvdjEvcHVibGljX2tleS5wcm90bxIabmlsbGlvbi5hdXRoLnYxLnB1YmxpY19rZXkiWgoJUHVibGljS2V5EjsKCGtleV90eXBlGAEgASgOMikubmlsbGlvbi5hdXRoLnYxLnB1YmxpY19rZXkuUHVibGljS2V5VHlwZRIQCghjb250ZW50cxgCIAEoDCorCg1QdWJsaWNLZXlUeXBlEgsKB0VEMjU1MTkQABINCglTRUNQMjU2SzEQAUK4AQoeY29tLm5pbGxpb24uYXV0aC52MS5wdWJsaWNfa2V5Qg5QdWJsaWNLZXlQcm90b1ABogIETkFWUKoCGU5pbGxpb24uQXV0aC5WMS5QdWJsaWNLZXnKAhlOaWxsaW9uXEF1dGhcVjFcUHVibGljS2V54gIlTmlsbGlvblxBdXRoXFYxXFB1YmxpY0tleVxHUEJNZXRhZGF0YeoCHE5pbGxpb246OkF1dGg6OlYxOjpQdWJsaWNLZXliBnByb3RvMw");
var PublicKeySchema = /* @__PURE__ */ messageDesc7(file_nillion_auth_v1_public_key, 0);

// src/gen-proto/nillion/auth/v1/token_pb.ts
import { fileDesc as fileDesc11, messageDesc as messageDesc9 } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_timestamp as file_google_protobuf_timestamp3 } from "@bufbuild/protobuf/wkt";

// src/gen-proto/nillion/membership/v1/cluster_pb.ts
import { enumDesc as enumDesc3, fileDesc as fileDesc10, messageDesc as messageDesc8 } from "@bufbuild/protobuf/codegenv1";
var file_nillion_membership_v1_cluster = /* @__PURE__ */ fileDesc10("CiNuaWxsaW9uL21lbWJlcnNoaXAvdjEvY2x1c3Rlci5wcm90bxIdbmlsbGlvbi5tZW1iZXJzaGlwLnYxLmNsdXN0ZXIi5QEKB0NsdXN0ZXISPQoHbWVtYmVycxgBIAMoCzIsLm5pbGxpb24ubWVtYmVyc2hpcC52MS5jbHVzdGVyLkNsdXN0ZXJNZW1iZXISPAoGbGVhZGVyGAIgASgLMiwubmlsbGlvbi5tZW1iZXJzaGlwLnYxLmNsdXN0ZXIuQ2x1c3Rlck1lbWJlchIzCgVwcmltZRgDIAEoDjIkLm5pbGxpb24ubWVtYmVyc2hpcC52MS5jbHVzdGVyLlByaW1lEhkKEXBvbHlub21pYWxfZGVncmVlGAQgASgNEg0KBWthcHBhGAUgASgNItoBCg1DbHVzdGVyTWVtYmVyEjcKCGlkZW50aXR5GAEgASgLMiUubmlsbGlvbi5tZW1iZXJzaGlwLnYxLmNsdXN0ZXIuTm9kZUlkEjkKCnB1YmxpY19rZXkYAiABKAsyJS5uaWxsaW9uLmF1dGgudjEucHVibGljX2tleS5QdWJsaWNLZXkSFQoNZ3JwY19lbmRwb2ludBgDIAEoCRI+CgtwdWJsaWNfa2V5cxgEIAEoCzIpLm5pbGxpb24ubWVtYmVyc2hpcC52MS5jbHVzdGVyLlB1YmxpY0tleXMiSwoKUHVibGljS2V5cxI9Cg5hdXRoZW50aWNhdGlvbhgBIAEoCzIlLm5pbGxpb24uYXV0aC52MS5wdWJsaWNfa2V5LlB1YmxpY0tleSIaCgZOb2RlSWQSEAoIY29udGVudHMYASABKAwqPwoFUHJpbWUSEAoMU0FGRV82NF9CSVRTEAASEQoNU0FGRV8xMjhfQklUUxABEhEKDVNBRkVfMjU2X0JJVFMQAkLJAQohY29tLm5pbGxpb24ubWVtYmVyc2hpcC52MS5jbHVzdGVyQgxDbHVzdGVyUHJvdG9QAaICBE5NVkOqAh1OaWxsaW9uLk1lbWJlcnNoaXAuVjEuQ2x1c3RlcsoCHU5pbGxpb25cTWVtYmVyc2hpcFxWMVxDbHVzdGVy4gIpTmlsbGlvblxNZW1iZXJzaGlwXFYxXENsdXN0ZXJcR1BCTWV0YWRhdGHqAiBOaWxsaW9uOjpNZW1iZXJzaGlwOjpWMTo6Q2x1c3RlcmIGcHJvdG8z", [file_nillion_auth_v1_public_key]);
var NodeIdSchema = /* @__PURE__ */ messageDesc8(file_nillion_membership_v1_cluster, 3);

// src/gen-proto/nillion/auth/v1/token_pb.ts
var file_nillion_auth_v1_token = /* @__PURE__ */ fileDesc11("ChtuaWxsaW9uL2F1dGgvdjEvdG9rZW4ucHJvdG8SFW5pbGxpb24uYXV0aC52MS50b2tlbiJ1CgtTaWduZWRUb2tlbhIYChBzZXJpYWxpemVkX3Rva2VuGAEgASgMEjkKCnB1YmxpY19rZXkYAiABKAsyJS5uaWxsaW9uLmF1dGgudjEucHVibGljX2tleS5QdWJsaWNLZXkSEQoJc2lnbmF0dXJlGAMgASgMIoYBCgVUb2tlbhINCgVub25jZRgBIAEoDBI+Cg90YXJnZXRfaWRlbnRpdHkYAiABKAsyJS5uaWxsaW9uLm1lbWJlcnNoaXAudjEuY2x1c3Rlci5Ob2RlSWQSLgoKZXhwaXJlc19hdBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCnwEKGWNvbS5uaWxsaW9uLmF1dGgudjEudG9rZW5CClRva2VuUHJvdG9QAaICBE5BVlSqAhVOaWxsaW9uLkF1dGguVjEuVG9rZW7KAhVOaWxsaW9uXEF1dGhcVjFcVG9rZW7iAiFOaWxsaW9uXEF1dGhcVjFcVG9rZW5cR1BCTWV0YWRhdGHqAhhOaWxsaW9uOjpBdXRoOjpWMTo6VG9rZW5iBnByb3RvMw", [file_google_protobuf_timestamp3, file_nillion_auth_v1_public_key, file_nillion_membership_v1_cluster]);
var SignedTokenSchema = /* @__PURE__ */ messageDesc9(file_nillion_auth_v1_token, 0);
var TokenSchema = /* @__PURE__ */ messageDesc9(file_nillion_auth_v1_token, 1);

// src/auth.ts
var HEADER_NAME_BASE64_AUTH = "x-nillion-token";
var NONCE_LENGTH = 32;
var TOKEN_TTL_IN_SECS = 60;
var createAuthInterceptor = (auth, node) => {
  return (next) => async (req) => {
    const headers = new Headers(req.header);
    const token = auth.generateToken(node);
    const signedToken = auth.signToken(token);
    const serialized = auth.serialize(signedToken);
    headers.set(HEADER_NAME_BASE64_AUTH, serialized);
    const authenticatedReq = {
      ...req,
      header: headers
    };
    return next(authenticatedReq);
  };
};
var TokenAuthManager = class _TokenAuthManager {
  constructor(privateKey) {
    this.privateKey = privateKey;
    this.publicKey = create7(PublicKeySchema, {
      keyType: 1 /* SECP256K1 */,
      contents: secp256k1.getPublicKey(this.privateKey, true)
    });
  }
  publicKey;
  generateToken(id) {
    const expires = new Date(Date.now() + TOKEN_TTL_IN_SECS * 1e3);
    const expiresAt = timestampFromDate(expires);
    return create7(TokenSchema, {
      nonce: randomBytes(NONCE_LENGTH),
      targetIdentity: create7(NodeIdSchema, {
        contents: id.inner
      }),
      expiresAt
    });
  }
  signToken(token) {
    const serializedToken = toBinary(TokenSchema, token);
    const signature = this.sign(serializedToken);
    return create7(SignedTokenSchema, {
      serializedToken,
      publicKey: this.publicKey,
      signature
    });
  }
  sign(data) {
    const hash = sha2562(data);
    return secp256k1.sign(hash, this.privateKey).toCompactRawBytes();
  }
  isTokenExpired(token) {
    if (token.expiresAt) {
      const expires = timestampDate2(token.expiresAt);
      const now = /* @__PURE__ */ new Date();
      return expires < now;
    }
    return false;
  }
  verify(signed) {
    const signature = secp256k1.Signature.fromCompact(signed.signature);
    const hash = sha2562(signed.serializedToken);
    return secp256k1.verify(signature, hash, this.publicKey.contents);
  }
  serialize(signed) {
    const binary = toBinary(SignedTokenSchema, signed);
    return btoa(String.fromCharCode(...binary));
  }
  deserialize(data) {
    const bytes = atob(data).split("").map((char) => char.charCodeAt(0));
    const binary = new Uint8Array(bytes);
    return fromBinary2(SignedTokenSchema, binary);
  }
  static fromSeed(seed) {
    const privateKey = sha2562(seed);
    return new _TokenAuthManager(privateKey);
  }
};

// src/gen-proto/nillion/membership/v1/service_pb.ts
import { fileDesc as fileDesc12, serviceDesc as serviceDesc2 } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_empty as file_google_protobuf_empty3 } from "@bufbuild/protobuf/wkt";
var file_nillion_membership_v1_service = /* @__PURE__ */ fileDesc12("CiNuaWxsaW9uL21lbWJlcnNoaXAvdjEvc2VydmljZS5wcm90bxIVbmlsbGlvbi5tZW1iZXJzaGlwLnYxMlcKCk1lbWJlcnNoaXASSQoHQ2x1c3RlchIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRomLm5pbGxpb24ubWVtYmVyc2hpcC52MS5jbHVzdGVyLkNsdXN0ZXJCnwEKGWNvbS5uaWxsaW9uLm1lbWJlcnNoaXAudjFCDFNlcnZpY2VQcm90b1ABogIDTk1YqgIVTmlsbGlvbi5NZW1iZXJzaGlwLlYxygIVTmlsbGlvblxNZW1iZXJzaGlwXFYx4gIhTmlsbGlvblxNZW1iZXJzaGlwXFYxXEdQQk1ldGFkYXRh6gIXTmlsbGlvbjo6TWVtYmVyc2hpcDo6VjFiBnByb3RvMw", [file_google_protobuf_empty3, file_nillion_membership_v1_cluster]);
var Membership = /* @__PURE__ */ serviceDesc2(file_nillion_membership_v1_service, 0);

// src/vm/client.ts
import { SecretMasker } from "@nillion/client-wasm";
import { z as z16 } from "zod";

// src/vm/operation/delete-values.ts
import { create as create8 } from "@bufbuild/protobuf";
import { createClient as createClient2 } from "@connectrpc/connect";
import { Effect as E3, pipe as pipe3 } from "effect";
import { parse } from "uuid";
import { z as z6 } from "zod";

// src/gen-proto/nillion/values/v1/delete_pb.ts
import { fileDesc as fileDesc13, messageDesc as messageDesc10 } from "@bufbuild/protobuf/codegenv1";
var file_nillion_values_v1_delete = /* @__PURE__ */ fileDesc13("Ch5uaWxsaW9uL3ZhbHVlcy92MS9kZWxldGUucHJvdG8SGG5pbGxpb24udmFsdWVzLnYxLmRlbGV0ZSIoChNEZWxldGVWYWx1ZXNSZXF1ZXN0EhEKCXZhbHVlc19pZBgBIAEoDEKvAQocY29tLm5pbGxpb24udmFsdWVzLnYxLmRlbGV0ZUILRGVsZXRlUHJvdG9QAaICBE5WVkSqAhhOaWxsaW9uLlZhbHVlcy5WMS5EZWxldGXKAhhOaWxsaW9uXFZhbHVlc1xWMVxEZWxldGXiAiROaWxsaW9uXFZhbHVlc1xWMVxEZWxldGVcR1BCTWV0YWRhdGHqAhtOaWxsaW9uOjpWYWx1ZXM6OlYxOjpEZWxldGViBnByb3RvMw");
var DeleteValuesRequestSchema = /* @__PURE__ */ messageDesc10(file_nillion_values_v1_delete, 0);

// src/gen-proto/nillion/values/v1/service_pb.ts
import { fileDesc as fileDesc16, serviceDesc as serviceDesc3 } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_empty as file_google_protobuf_empty4 } from "@bufbuild/protobuf/wkt";

// src/gen-proto/nillion/values/v1/retrieve_pb.ts
import { fileDesc as fileDesc14, messageDesc as messageDesc11 } from "@bufbuild/protobuf/codegenv1";
var file_nillion_values_v1_retrieve = /* @__PURE__ */ fileDesc14("CiBuaWxsaW9uL3ZhbHVlcy92MS9yZXRyaWV2ZS5wcm90bxIabmlsbGlvbi52YWx1ZXMudjEucmV0cmlldmUiWwoVUmV0cmlldmVWYWx1ZXNSZXF1ZXN0EkIKDnNpZ25lZF9yZWNlaXB0GAEgASgLMioubmlsbGlvbi5wYXltZW50cy52MS5yZWNlaXB0LlNpZ25lZFJlY2VpcHQiMAoWUmV0cmlldmVWYWx1ZXNSZXNwb25zZRIWCg5iaW5jb2RlX3ZhbHVlcxgBIAEoDEK7AQoeY29tLm5pbGxpb24udmFsdWVzLnYxLnJldHJpZXZlQg1SZXRyaWV2ZVByb3RvUAGiAgROVlZSqgIaTmlsbGlvbi5WYWx1ZXMuVjEuUmV0cmlldmXKAhpOaWxsaW9uXFZhbHVlc1xWMVxSZXRyaWV2ZeICJk5pbGxpb25cVmFsdWVzXFYxXFJldHJpZXZlXEdQQk1ldGFkYXRh6gIdTmlsbGlvbjo6VmFsdWVzOjpWMTo6UmV0cmlldmViBnByb3RvMw", [file_nillion_payments_v1_receipt]);
var RetrieveValuesRequestSchema = /* @__PURE__ */ messageDesc11(file_nillion_values_v1_retrieve, 0);

// src/gen-proto/nillion/values/v1/store_pb.ts
import { fileDesc as fileDesc15, messageDesc as messageDesc12 } from "@bufbuild/protobuf/codegenv1";
var file_nillion_values_v1_store = /* @__PURE__ */ fileDesc15("Ch1uaWxsaW9uL3ZhbHVlcy92MS9zdG9yZS5wcm90bxIXbmlsbGlvbi52YWx1ZXMudjEuc3RvcmUi0QEKElN0b3JlVmFsdWVzUmVxdWVzdBJCCg5zaWduZWRfcmVjZWlwdBgBIAEoCzIqLm5pbGxpb24ucGF5bWVudHMudjEucmVjZWlwdC5TaWduZWRSZWNlaXB0EhYKDmJpbmNvZGVfdmFsdWVzGAIgASgMEkQKC3Blcm1pc3Npb25zGAMgASgLMi8ubmlsbGlvbi5wZXJtaXNzaW9ucy52MS5wZXJtaXNzaW9ucy5QZXJtaXNzaW9ucxIZChF1cGRhdGVfaWRlbnRpZmllchgEIAEoDCIoChNTdG9yZVZhbHVlc1Jlc3BvbnNlEhEKCXZhbHVlc19pZBgBIAEoDEKpAQobY29tLm5pbGxpb24udmFsdWVzLnYxLnN0b3JlQgpTdG9yZVByb3RvUAGiAgROVlZTqgIXTmlsbGlvbi5WYWx1ZXMuVjEuU3RvcmXKAhdOaWxsaW9uXFZhbHVlc1xWMVxTdG9yZeICI05pbGxpb25cVmFsdWVzXFYxXFN0b3JlXEdQQk1ldGFkYXRh6gIaTmlsbGlvbjo6VmFsdWVzOjpWMTo6U3RvcmViBnByb3RvMw", [file_nillion_payments_v1_receipt, file_nillion_permissions_v1_permissions]);
var StoreValuesRequestSchema = /* @__PURE__ */ messageDesc12(file_nillion_values_v1_store, 0);

// src/gen-proto/nillion/values/v1/service_pb.ts
var file_nillion_values_v1_service = /* @__PURE__ */ fileDesc16("Ch9uaWxsaW9uL3ZhbHVlcy92MS9zZXJ2aWNlLnByb3RvEhFuaWxsaW9uLnZhbHVlcy52MTLCAgoGVmFsdWVzEmgKC1N0b3JlVmFsdWVzEisubmlsbGlvbi52YWx1ZXMudjEuc3RvcmUuU3RvcmVWYWx1ZXNSZXF1ZXN0GiwubmlsbGlvbi52YWx1ZXMudjEuc3RvcmUuU3RvcmVWYWx1ZXNSZXNwb25zZRJ3Cg5SZXRyaWV2ZVZhbHVlcxIxLm5pbGxpb24udmFsdWVzLnYxLnJldHJpZXZlLlJldHJpZXZlVmFsdWVzUmVxdWVzdBoyLm5pbGxpb24udmFsdWVzLnYxLnJldHJpZXZlLlJldHJpZXZlVmFsdWVzUmVzcG9uc2USVQoMRGVsZXRlVmFsdWVzEi0ubmlsbGlvbi52YWx1ZXMudjEuZGVsZXRlLkRlbGV0ZVZhbHVlc1JlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHlCiwEKFWNvbS5uaWxsaW9uLnZhbHVlcy52MUIMU2VydmljZVByb3RvUAGiAgNOVliqAhFOaWxsaW9uLlZhbHVlcy5WMcoCEU5pbGxpb25cVmFsdWVzXFYx4gIdTmlsbGlvblxWYWx1ZXNcVjFcR1BCTWV0YWRhdGHqAhNOaWxsaW9uOjpWYWx1ZXM6OlYxYgZwcm90bzM", [file_google_protobuf_empty4, file_nillion_values_v1_delete, file_nillion_values_v1_retrieve, file_nillion_values_v1_store]);
var Values = /* @__PURE__ */ serviceDesc3(file_nillion_values_v1_service, 0);

// src/vm/operation/retry-client.ts
import { Code, ConnectError } from "@connectrpc/connect";
import { Duration, Effect as E2, Schedule, pipe as pipe2 } from "effect";
import { UnknownException as UnknownException2 } from "effect/Cause";
function isRetryableError(error) {
  let cause = error;
  if (error instanceof UnknownException2 && error.cause) {
    cause = error.cause;
  }
  if (cause instanceof ConnectError) {
    return [
      Code.DeadlineExceeded,
      Code.ResourceExhausted,
      Code.Unavailable,
      Code.DataLoss
    ].includes(cause.code);
  }
  if (cause instanceof Error) {
    return [
      "NetworkError",
      "AbortError",
      "TimeoutError",
      "ERR_NETWORK",
      "ECONNREFUSED"
    ].includes(cause.name);
  }
  return false;
}
function createRetryStrategy(context) {
  const maxRetries = 5;
  let attempt = 0;
  const schedule = pipe2(
    Schedule.fixed(Duration.seconds(1)),
    Schedule.intersect(Schedule.recurs(maxRetries)),
    Schedule.whileInput((error) => {
      const recoverable = isRetryableError(error);
      attempt += 1;
      if (recoverable) {
        Log(`${context} failed (attempt ${attempt}/${maxRetries}): %O`, error);
      } else {
        Log(`${context} irrecoverable failure: %O`, error);
      }
      return recoverable;
    })
  );
  return (effect) => E2.retry(effect, schedule);
}
function retryGrpcRequestIfRecoverable(context, request) {
  return pipe2(
    request,
    createRetryStrategy(context),
    E2.tapError(
      (error) => E2.sync(() => Log("Retries exhausted. Final error:", error))
    )
  );
}

// src/vm/operation/delete-values.ts
var DeleteValuesConfig = z6.object({
  // due to import resolution order we cannot use instanceof because VmClient isn't defined first
  vm: z6.custom(),
  id: Uuid
});
var DeleteValues = class _DeleteValues {
  constructor(config) {
    this.config = config;
  }
  invoke() {
    return pipe3(
      this.prepareRequestPerNode(),
      E3.all,
      E3.map(
        (requests) => requests.map(
          (request) => retryGrpcRequestIfRecoverable(
            "DeleteValues",
            this.invokeNodeRequest(request)
          )
        )
      ),
      E3.flatMap(
        (effects) => E3.all(effects, { concurrency: this.config.vm.nodes.length })
      ),
      E3.flatMap(collapse),
      E3.tapBoth({
        onFailure: (e) => E3.sync(() => Log("Values delete failed: %O", e)),
        onSuccess: (id) => E3.sync(() => Log(`Values deleted: ${id}`))
      }),
      E3.runPromise
    );
  }
  prepareRequestPerNode() {
    const valuesId = parse(this.config.id);
    return this.config.vm.nodes.map(
      (node) => E3.succeed({
        nodeId: node.id,
        client: createClient2(Values, node.transport),
        request: create8(DeleteValuesRequestSchema, {
          valuesId
        })
      })
    );
  }
  invokeNodeRequest(options) {
    const { nodeId, client, request } = options;
    return pipe3(
      E3.tryPromise(() => client.deleteValues(request)),
      E3.map((_response) => this.config.id),
      E3.tap(
        (id) => Log(`Values deleted: node=${nodeId.toBase64()} values=${id} `)
      )
    );
  }
  static new(config) {
    return new _DeleteValues(config);
  }
};
var DeleteValuesBuilder = class _DeleteValuesBuilder {
  constructor(vm) {
    this.vm = vm;
  }
  _id;
  id(value) {
    this._id = value;
    return this;
  }
  build() {
    const config = DeleteValuesConfig.parse({
      vm: this.vm,
      id: this._id
    });
    return DeleteValues.new(config);
  }
  static init = (vm) => new _DeleteValuesBuilder(vm);
};

// src/vm/operation/invoke-compute.ts
import { create as create9 } from "@bufbuild/protobuf";
import { createClient as createClient3 } from "@connectrpc/connect";
import {
  NadaValues,
  compute_values_size,
  encode_values
} from "@nillion/client-wasm";
import { Effect as E4, pipe as pipe4 } from "effect";
import { UnknownException as UnknownException3 } from "effect/Cause";
import { parse as parse2, stringify } from "uuid";
import { z as z7 } from "zod";

// src/gen-proto/nillion/compute/v1/invoke_pb.ts
import { fileDesc as fileDesc17, messageDesc as messageDesc13 } from "@bufbuild/protobuf/codegenv1";
var file_nillion_compute_v1_invoke = /* @__PURE__ */ fileDesc17("Ch9uaWxsaW9uL2NvbXB1dGUvdjEvaW52b2tlLnByb3RvEhluaWxsaW9uLmNvbXB1dGUudjEuaW52b2tlIpMCChRJbnZva2VDb21wdXRlUmVxdWVzdBJCCg5zaWduZWRfcmVjZWlwdBgBIAEoCzIqLm5pbGxpb24ucGF5bWVudHMudjEucmVjZWlwdC5TaWduZWRSZWNlaXB0EhEKCXZhbHVlX2lkcxgCIAMoDBIWCg5iaW5jb2RlX3ZhbHVlcxgDIAEoDBJECg5pbnB1dF9iaW5kaW5ncxgEIAMoCzIsLm5pbGxpb24uY29tcHV0ZS52MS5pbnZva2UuSW5wdXRQYXJ0eUJpbmRpbmcSRgoPb3V0cHV0X2JpbmRpbmdzGAUgAygLMi0ubmlsbGlvbi5jb21wdXRlLnYxLmludm9rZS5PdXRwdXRQYXJ0eUJpbmRpbmciKwoVSW52b2tlQ29tcHV0ZVJlc3BvbnNlEhIKCmNvbXB1dGVfaWQYASABKAwiUwoRSW5wdXRQYXJ0eUJpbmRpbmcSEgoKcGFydHlfbmFtZRgBIAEoCRIqCgR1c2VyGAIgASgLMhwubmlsbGlvbi5hdXRoLnYxLnVzZXIuVXNlcklkIlUKEk91dHB1dFBhcnR5QmluZGluZxISCgpwYXJ0eV9uYW1lGAEgASgJEisKBXVzZXJzGAIgAygLMhwubmlsbGlvbi5hdXRoLnYxLnVzZXIuVXNlcklkQrQBCh1jb20ubmlsbGlvbi5jb21wdXRlLnYxLmludm9rZUILSW52b2tlUHJvdG9QAaICBE5DVkmqAhlOaWxsaW9uLkNvbXB1dGUuVjEuSW52b2tlygIZTmlsbGlvblxDb21wdXRlXFYxXEludm9rZeICJU5pbGxpb25cQ29tcHV0ZVxWMVxJbnZva2VcR1BCTWV0YWRhdGHqAhxOaWxsaW9uOjpDb21wdXRlOjpWMTo6SW52b2tlYgZwcm90bzM", [file_nillion_payments_v1_receipt, file_nillion_auth_v1_user]);
var InvokeComputeRequestSchema = /* @__PURE__ */ messageDesc13(file_nillion_compute_v1_invoke, 0);
var InputPartyBindingSchema = /* @__PURE__ */ messageDesc13(file_nillion_compute_v1_invoke, 2);
var OutputPartyBindingSchema = /* @__PURE__ */ messageDesc13(file_nillion_compute_v1_invoke, 3);

// src/gen-proto/nillion/compute/v1/service_pb.ts
import { fileDesc as fileDesc20, serviceDesc as serviceDesc4 } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_empty as file_google_protobuf_empty6 } from "@bufbuild/protobuf/wkt";

// src/gen-proto/nillion/compute/v1/stream_pb.ts
import { fileDesc as fileDesc18, messageDesc as messageDesc14 } from "@bufbuild/protobuf/codegenv1";
var file_nillion_compute_v1_stream = /* @__PURE__ */ fileDesc18("Ch9uaWxsaW9uL2NvbXB1dGUvdjEvc3RyZWFtLnByb3RvEhluaWxsaW9uLmNvbXB1dGUudjEuc3RyZWFtIkMKFENvbXB1dGVTdHJlYW1NZXNzYWdlEhIKCmNvbXB1dGVfaWQYASABKAwSFwoPYmluY29kZV9tZXNzYWdlGAIgASgMQrQBCh1jb20ubmlsbGlvbi5jb21wdXRlLnYxLnN0cmVhbUILU3RyZWFtUHJvdG9QAaICBE5DVlOqAhlOaWxsaW9uLkNvbXB1dGUuVjEuU3RyZWFtygIZTmlsbGlvblxDb21wdXRlXFYxXFN0cmVhbeICJU5pbGxpb25cQ29tcHV0ZVxWMVxTdHJlYW1cR1BCTWV0YWRhdGHqAhxOaWxsaW9uOjpDb21wdXRlOjpWMTo6U3RyZWFtYgZwcm90bzM");

// src/gen-proto/nillion/compute/v1/retrieve_pb.ts
import { fileDesc as fileDesc19, messageDesc as messageDesc15 } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_empty as file_google_protobuf_empty5 } from "@bufbuild/protobuf/wkt";
var file_nillion_compute_v1_retrieve = /* @__PURE__ */ fileDesc19("CiFuaWxsaW9uL2NvbXB1dGUvdjEvcmV0cmlldmUucHJvdG8SG25pbGxpb24uY29tcHV0ZS52MS5yZXRyaWV2ZSIsChZSZXRyaWV2ZVJlc3VsdHNSZXF1ZXN0EhIKCmNvbXB1dGVfaWQYASABKAwirQEKF1JldHJpZXZlUmVzdWx0c1Jlc3BvbnNlEjUKE3dhaXRpbmdfY29tcHV0YXRpb24YASABKAsyFi5nb29nbGUucHJvdG9idWYuRW1wdHlIABJBCgdzdWNjZXNzGAIgASgLMi4ubmlsbGlvbi5jb21wdXRlLnYxLnJldHJpZXZlLkNvbXB1dGF0aW9uUmVzdWx0SAASDwoFZXJyb3IYAyABKAlIAEIHCgVzdGF0ZSIrChFDb21wdXRhdGlvblJlc3VsdBIWCg5iaW5jb2RlX3ZhbHVlcxgBIAEoDELAAQofY29tLm5pbGxpb24uY29tcHV0ZS52MS5yZXRyaWV2ZUINUmV0cmlldmVQcm90b1ABogIETkNWUqoCG05pbGxpb24uQ29tcHV0ZS5WMS5SZXRyaWV2ZcoCG05pbGxpb25cQ29tcHV0ZVxWMVxSZXRyaWV2ZeICJ05pbGxpb25cQ29tcHV0ZVxWMVxSZXRyaWV2ZVxHUEJNZXRhZGF0YeoCHk5pbGxpb246OkNvbXB1dGU6OlYxOjpSZXRyaWV2ZWIGcHJvdG8z", [file_google_protobuf_empty5]);
var RetrieveResultsRequestSchema = /* @__PURE__ */ messageDesc15(file_nillion_compute_v1_retrieve, 0);

// src/gen-proto/nillion/compute/v1/service_pb.ts
var file_nillion_compute_v1_service = /* @__PURE__ */ fileDesc20("CiBuaWxsaW9uL2NvbXB1dGUvdjEvc2VydmljZS5wcm90bxISbmlsbGlvbi5jb21wdXRlLnYxMtkCCgdDb21wdXRlEnIKDUludm9rZUNvbXB1dGUSLy5uaWxsaW9uLmNvbXB1dGUudjEuaW52b2tlLkludm9rZUNvbXB1dGVSZXF1ZXN0GjAubmlsbGlvbi5jb21wdXRlLnYxLmludm9rZS5JbnZva2VDb21wdXRlUmVzcG9uc2USWgoNU3RyZWFtQ29tcHV0ZRIvLm5pbGxpb24uY29tcHV0ZS52MS5zdHJlYW0uQ29tcHV0ZVN0cmVhbU1lc3NhZ2UaFi5nb29nbGUucHJvdG9idWYuRW1wdHkoARJ+Cg9SZXRyaWV2ZVJlc3VsdHMSMy5uaWxsaW9uLmNvbXB1dGUudjEucmV0cmlldmUuUmV0cmlldmVSZXN1bHRzUmVxdWVzdBo0Lm5pbGxpb24uY29tcHV0ZS52MS5yZXRyaWV2ZS5SZXRyaWV2ZVJlc3VsdHNSZXNwb25zZTABQpABChZjb20ubmlsbGlvbi5jb21wdXRlLnYxQgxTZXJ2aWNlUHJvdG9QAaICA05DWKoCEk5pbGxpb24uQ29tcHV0ZS5WMcoCEk5pbGxpb25cQ29tcHV0ZVxWMeICHk5pbGxpb25cQ29tcHV0ZVxWMVxHUEJNZXRhZGF0YeoCFE5pbGxpb246OkNvbXB1dGU6OlYxYgZwcm90bzM", [file_google_protobuf_empty6, file_nillion_compute_v1_invoke, file_nillion_compute_v1_stream, file_nillion_compute_v1_retrieve]);
var Compute = /* @__PURE__ */ serviceDesc4(file_nillion_compute_v1_service, 0);

// src/vm/operation/invoke-compute.ts
var InvokeComputeConfig = z7.object({
  // due to import resolution order we cannot use instanceof because VmClient isn't defined first
  vm: z7.custom(),
  programId: ProgramId,
  computeTimeValues: z7.instanceof(NadaValues),
  valueIds: z7.array(Uuid),
  inputBindings: z7.array(InputBindings),
  outputBindings: z7.array(OutputBindings)
});
var InvokeCompute = class _InvokeCompute {
  constructor(config) {
    this.config = config;
  }
  async invoke() {
    return pipe4(
      E4.tryPromise(() => this.pay()),
      E4.map((receipt) => this.prepareRequestPerNode(receipt)),
      E4.flatMap(E4.all),
      E4.map(
        (requests) => requests.map(
          (request) => retryGrpcRequestIfRecoverable(
            "InvokeCompute",
            this.invokeNodeRequest(request)
          )
        )
      ),
      E4.flatMap(
        (effects) => E4.all(effects, { concurrency: this.config.vm.nodes.length })
      ),
      E4.flatMap(collapse),
      E4.tapBoth({
        onFailure: (e) => E4.sync(() => Log("Invoke compute failed: %O", e)),
        onSuccess: (id) => E4.sync(() => Log(`Invoke compute: ${id}`))
      }),
      E4.runPromise
    );
  }
  prepareRequestPerNode(signedReceipt) {
    const shares = this.config.vm.masker.mask(this.config.computeTimeValues);
    const valueIds = this.config.valueIds.map(parse2);
    const inputBindings = this.config.inputBindings.map(
      (bindings) => create9(InputPartyBindingSchema, {
        partyName: bindings.party,
        user: bindings.user.toProto()
      })
    );
    const outputBindings = this.config.outputBindings.map(
      (bindings) => create9(OutputPartyBindingSchema, {
        partyName: bindings.party,
        users: bindings.users.map((user) => user.toProto())
      })
    );
    return shares.map((share) => {
      const nodeId = PartyId.from(share.party.to_byte_array());
      const node = this.config.vm.nodes.find(
        (n) => n.id.toBase64() === nodeId.toBase64()
      );
      if (!node) {
        return E4.fail(
          new UnknownException3(
            `Failed to match configured nodes with share's party id:${nodeId}`
          )
        );
      }
      return E4.succeed({
        nodeId: node.id,
        client: createClient3(Compute, node.transport),
        request: create9(InvokeComputeRequestSchema, {
          signedReceipt,
          valueIds,
          bincodeValues: encode_values(share.shares),
          inputBindings,
          outputBindings
        })
      });
    });
  }
  invokeNodeRequest(options) {
    const { nodeId, client, request } = options;
    return pipe4(
      E4.tryPromise(() => client.invokeCompute(request)),
      E4.map((response) => stringify(response.computeId)),
      E4.tap((id) => Log(`Invoked compute: node=${nodeId.toBase64()} id=${id}`))
    );
  }
  async pay() {
    const {
      programId,
      computeTimeValues,
      vm: { payer }
    } = this.config;
    return payer.payForOperation(
      create9(PriceQuoteRequestSchema, {
        operation: {
          case: "invokeCompute",
          value: {
            programId,
            valuesPayloadSize: compute_values_size(computeTimeValues)
          }
        }
      })
    );
  }
  static new(config) {
    return new _InvokeCompute(config);
  }
};
var InvokeComputeBuilder = class _InvokeComputeBuilder {
  constructor(vm) {
    this.vm = vm;
  }
  _programId;
  _computeTimeValues = new NadaValues();
  _valueIds = [];
  _inputBindings = [];
  _outputBindings = [];
  program(id) {
    this._programId = id;
    return this;
  }
  computeTimeValues(name, value) {
    this._computeTimeValues.insert(name, value);
    return this;
  }
  valueIds(...ids) {
    this._valueIds.push(...ids);
    return this;
  }
  inputParty(party, user) {
    this._inputBindings.push({ party, user });
    return this;
  }
  outputParty(party, users) {
    this._outputBindings.push({ party, users });
    return this;
  }
  build() {
    const config = InvokeComputeConfig.parse({
      vm: this.vm,
      programId: this._programId,
      computeTimeValues: this._computeTimeValues,
      valueIds: this._valueIds,
      inputBindings: this._inputBindings,
      outputBindings: this._outputBindings
    });
    return InvokeCompute.new(config);
  }
  static init = (vm) => new _InvokeComputeBuilder(vm);
};

// src/vm/operation/overwrite-permissions.ts
import { create as create10 } from "@bufbuild/protobuf";
import { createClient as createClient4 } from "@connectrpc/connect";
import { Effect as E5, pipe as pipe5 } from "effect";
import { parse as parseUuid } from "uuid";
import { z as z8 } from "zod";

// src/gen-proto/nillion/permissions/v1/overwrite_pb.ts
import { fileDesc as fileDesc21, messageDesc as messageDesc16 } from "@bufbuild/protobuf/codegenv1";
var file_nillion_permissions_v1_overwrite = /* @__PURE__ */ fileDesc21("CiZuaWxsaW9uL3Blcm1pc3Npb25zL3YxL292ZXJ3cml0ZS5wcm90bxIgbmlsbGlvbi5wZXJtaXNzaW9ucy52MS5vdmVyd3JpdGUipwEKG092ZXJ3cml0ZVBlcm1pc3Npb25zUmVxdWVzdBJCCg5zaWduZWRfcmVjZWlwdBgBIAEoCzIqLm5pbGxpb24ucGF5bWVudHMudjEucmVjZWlwdC5TaWduZWRSZWNlaXB0EkQKC3Blcm1pc3Npb25zGAIgASgLMi8ubmlsbGlvbi5wZXJtaXNzaW9ucy52MS5wZXJtaXNzaW9ucy5QZXJtaXNzaW9uc0LaAQokY29tLm5pbGxpb24ucGVybWlzc2lvbnMudjEub3ZlcndyaXRlQg5PdmVyd3JpdGVQcm90b1ABogIETlBWT6oCIE5pbGxpb24uUGVybWlzc2lvbnMuVjEuT3ZlcndyaXRlygIgTmlsbGlvblxQZXJtaXNzaW9uc1xWMVxPdmVyd3JpdGXiAixOaWxsaW9uXFBlcm1pc3Npb25zXFYxXE92ZXJ3cml0ZVxHUEJNZXRhZGF0YeoCI05pbGxpb246OlBlcm1pc3Npb25zOjpWMTo6T3ZlcndyaXRlYgZwcm90bzM", [file_nillion_payments_v1_receipt, file_nillion_permissions_v1_permissions]);
var OverwritePermissionsRequestSchema = /* @__PURE__ */ messageDesc16(file_nillion_permissions_v1_overwrite, 0);

// src/gen-proto/nillion/permissions/v1/service_pb.ts
import { fileDesc as fileDesc23, serviceDesc as serviceDesc5 } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_empty as file_google_protobuf_empty7 } from "@bufbuild/protobuf/wkt";

// src/gen-proto/nillion/permissions/v1/retrieve_pb.ts
import { fileDesc as fileDesc22, messageDesc as messageDesc17 } from "@bufbuild/protobuf/codegenv1";
var file_nillion_permissions_v1_retrieve = /* @__PURE__ */ fileDesc22("CiVuaWxsaW9uL3Blcm1pc3Npb25zL3YxL3JldHJpZXZlLnByb3RvEh9uaWxsaW9uLnBlcm1pc3Npb25zLnYxLnJldHJpZXZlImAKGlJldHJpZXZlUGVybWlzc2lvbnNSZXF1ZXN0EkIKDnNpZ25lZF9yZWNlaXB0GAEgASgLMioubmlsbGlvbi5wYXltZW50cy52MS5yZWNlaXB0LlNpZ25lZFJlY2VpcHRC1AEKI2NvbS5uaWxsaW9uLnBlcm1pc3Npb25zLnYxLnJldHJpZXZlQg1SZXRyaWV2ZVByb3RvUAGiAgROUFZSqgIfTmlsbGlvbi5QZXJtaXNzaW9ucy5WMS5SZXRyaWV2ZcoCH05pbGxpb25cUGVybWlzc2lvbnNcVjFcUmV0cmlldmXiAitOaWxsaW9uXFBlcm1pc3Npb25zXFYxXFJldHJpZXZlXEdQQk1ldGFkYXRh6gIiTmlsbGlvbjo6UGVybWlzc2lvbnM6OlYxOjpSZXRyaWV2ZWIGcHJvdG8z", [file_nillion_payments_v1_receipt]);
var RetrievePermissionsRequestSchema = /* @__PURE__ */ messageDesc17(file_nillion_permissions_v1_retrieve, 0);

// src/gen-proto/nillion/permissions/v1/service_pb.ts
var file_nillion_permissions_v1_service = /* @__PURE__ */ fileDesc23("CiRuaWxsaW9uL3Blcm1pc3Npb25zL3YxL3NlcnZpY2UucHJvdG8SFm5pbGxpb24ucGVybWlzc2lvbnMudjEy6AIKC1Blcm1pc3Npb25zEoMBChNSZXRyaWV2ZVBlcm1pc3Npb25zEjsubmlsbGlvbi5wZXJtaXNzaW9ucy52MS5yZXRyaWV2ZS5SZXRyaWV2ZVBlcm1pc3Npb25zUmVxdWVzdBovLm5pbGxpb24ucGVybWlzc2lvbnMudjEucGVybWlzc2lvbnMuUGVybWlzc2lvbnMSbQoUT3ZlcndyaXRlUGVybWlzc2lvbnMSPS5uaWxsaW9uLnBlcm1pc3Npb25zLnYxLm92ZXJ3cml0ZS5PdmVyd3JpdGVQZXJtaXNzaW9uc1JlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkSZAoRVXBkYXRlUGVybWlzc2lvbnMSNy5uaWxsaW9uLnBlcm1pc3Npb25zLnYxLnVwZGF0ZS5VcGRhdGVQZXJtaXNzaW9uc1JlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHlCpAEKGmNvbS5uaWxsaW9uLnBlcm1pc3Npb25zLnYxQgxTZXJ2aWNlUHJvdG9QAaICA05QWKoCFk5pbGxpb24uUGVybWlzc2lvbnMuVjHKAhZOaWxsaW9uXFBlcm1pc3Npb25zXFYx4gIiTmlsbGlvblxQZXJtaXNzaW9uc1xWMVxHUEJNZXRhZGF0YeoCGE5pbGxpb246OlBlcm1pc3Npb25zOjpWMWIGcHJvdG8z", [file_google_protobuf_empty7, file_nillion_permissions_v1_permissions, file_nillion_permissions_v1_retrieve, file_nillion_permissions_v1_overwrite, file_nillion_permissions_v1_update]);
var Permissions = /* @__PURE__ */ serviceDesc5(file_nillion_permissions_v1_service, 0);

// src/vm/operation/overwrite-permissions.ts
var OverwritePermissionsConfig = z8.object({
  // due to import resolution order we cannot use instanceof because VmClient isn't defined first
  vm: z8.custom(),
  id: Uuid,
  permissions: z8.custom()
});
var OverwritePermissions = class _OverwritePermissions {
  constructor(config) {
    this.config = config;
  }
  async invoke() {
    return pipe5(
      E5.tryPromise(() => this.pay()),
      E5.map((receipt) => this.prepareRequestPerNode(receipt)),
      E5.flatMap(E5.all),
      E5.map(
        (requests) => requests.map(
          (request) => retryGrpcRequestIfRecoverable(
            "OverwritePermissions",
            this.invokeNodeRequest(request)
          )
        )
      ),
      E5.flatMap(
        (effects) => E5.all(effects, { concurrency: this.config.vm.nodes.length })
      ),
      E5.flatMap(collapse),
      E5.tapBoth({
        onFailure: (e) => E5.sync(() => Log("Overwrite permissions failed: %O", e)),
        onSuccess: (permissions) => E5.sync(
          () => Log("Overwrote permissions: %O", permissions.toObject())
        )
      }),
      E5.runPromise
    );
  }
  prepareRequestPerNode(signedReceipt) {
    return this.config.vm.nodes.map(
      (node) => E5.succeed({
        nodeId: node.id,
        client: createClient4(Permissions, node.transport),
        request: create10(OverwritePermissionsRequestSchema, {
          signedReceipt,
          permissions: this.config.permissions.toProto()
        })
      })
    );
  }
  invokeNodeRequest(options) {
    const { nodeId, client, request } = options;
    return pipe5(
      E5.tryPromise(() => client.overwritePermissions(request)),
      E5.map((_response) => this.config.permissions),
      E5.tap(
        (_permissions) => Log(
          `Overwrote permissions: node=${nodeId.toBase64()} values=${this.config.id} `
        )
      )
    );
  }
  pay() {
    const {
      id,
      vm: { payer }
    } = this.config;
    return payer.payForOperation(
      create10(PriceQuoteRequestSchema, {
        operation: {
          case: "overwritePermissions",
          value: {
            valuesId: parseUuid(id)
          }
        }
      })
    );
  }
  static new(config) {
    return new _OverwritePermissions(config);
  }
};
var OverwritePermissionsBuilder = class _OverwritePermissionsBuilder {
  constructor(vm) {
    this.vm = vm;
  }
  _id;
  _permissions;
  id(value) {
    this._id = value;
    return this;
  }
  permissions(value) {
    this._permissions = value;
    return this;
  }
  build() {
    const config = OverwritePermissionsConfig.parse({
      vm: this.vm,
      id: this._id,
      permissions: this._permissions
    });
    return OverwritePermissions.new(config);
  }
  static init = (vm) => new _OverwritePermissionsBuilder(vm);
};

// src/vm/operation/query-pool-status.ts
import { create as create11 } from "@bufbuild/protobuf";
import { createClient as createClient5 } from "@connectrpc/connect";
import { Effect as E6, pipe as pipe6 } from "effect";
import { z as z9 } from "zod";

// src/gen-proto/nillion/leader_queries/v1/pool_status_pb.ts
import { fileDesc as fileDesc24, messageDesc as messageDesc18 } from "@bufbuild/protobuf/codegenv1";
var file_nillion_leader_queries_v1_pool_status = /* @__PURE__ */ fileDesc24("CituaWxsaW9uL2xlYWRlcl9xdWVyaWVzL3YxL3Bvb2xfc3RhdHVzLnByb3RvEiVuaWxsaW9uLmxlYWRlcl9xdWVyaWVzLnYxLnBvb2xfc3RhdHVzIlcKEVBvb2xTdGF0dXNSZXF1ZXN0EkIKDnNpZ25lZF9yZWNlaXB0GAEgASgLMioubmlsbGlvbi5wYXltZW50cy52MS5yZWNlaXB0LlNpZ25lZFJlY2VpcHQigAEKElBvb2xTdGF0dXNSZXNwb25zZRJMCgdvZmZzZXRzGAEgAygLMjsubmlsbGlvbi5sZWFkZXJfcXVlcmllcy52MS5wb29sX3N0YXR1cy5QcmVwcm9jZXNzaW5nT2Zmc2V0cxIcChRwcmVwcm9jZXNzaW5nX2FjdGl2ZRgCIAEoCCJ7ChRQcmVwcm9jZXNzaW5nT2Zmc2V0cxJHCgdlbGVtZW50GAEgASgOMjYubmlsbGlvbi5wcmVwcm9jZXNzaW5nLnYxLmVsZW1lbnQuUHJlcHJvY2Vzc2luZ0VsZW1lbnQSDQoFc3RhcnQYAiABKAQSCwoDZW5kGAMgASgEQuwBCiljb20ubmlsbGlvbi5sZWFkZXJfcXVlcmllcy52MS5wb29sX3N0YXR1c0IPUG9vbFN0YXR1c1Byb3RvUAGiAgROTFZQqgIjTmlsbGlvbi5MZWFkZXJRdWVyaWVzLlYxLlBvb2xTdGF0dXPKAiNOaWxsaW9uXExlYWRlclF1ZXJpZXNcVjFcUG9vbFN0YXR1c+ICL05pbGxpb25cTGVhZGVyUXVlcmllc1xWMVxQb29sU3RhdHVzXEdQQk1ldGFkYXRh6gImTmlsbGlvbjo6TGVhZGVyUXVlcmllczo6VjE6OlBvb2xTdGF0dXNiBnByb3RvMw", [file_nillion_preprocessing_v1_element, file_nillion_payments_v1_receipt]);
var PoolStatusRequestSchema = /* @__PURE__ */ messageDesc18(file_nillion_leader_queries_v1_pool_status, 0);

// src/gen-proto/nillion/leader_queries/v1/service_pb.ts
import { fileDesc as fileDesc25, serviceDesc as serviceDesc6 } from "@bufbuild/protobuf/codegenv1";
var file_nillion_leader_queries_v1_service = /* @__PURE__ */ fileDesc25("CiduaWxsaW9uL2xlYWRlcl9xdWVyaWVzL3YxL3NlcnZpY2UucHJvdG8SGW5pbGxpb24ubGVhZGVyX3F1ZXJpZXMudjEykwEKDUxlYWRlclF1ZXJpZXMSgQEKClBvb2xTdGF0dXMSOC5uaWxsaW9uLmxlYWRlcl9xdWVyaWVzLnYxLnBvb2xfc3RhdHVzLlBvb2xTdGF0dXNSZXF1ZXN0GjkubmlsbGlvbi5sZWFkZXJfcXVlcmllcy52MS5wb29sX3N0YXR1cy5Qb29sU3RhdHVzUmVzcG9uc2VCrwEKHWNvbS5uaWxsaW9uLmxlYWRlcl9xdWVyaWVzLnYxQgxTZXJ2aWNlUHJvdG9QAaICA05MWKoCGE5pbGxpb24uTGVhZGVyUXVlcmllcy5WMcoCGE5pbGxpb25cTGVhZGVyUXVlcmllc1xWMeICJE5pbGxpb25cTGVhZGVyUXVlcmllc1xWMVxHUEJNZXRhZGF0YeoCGk5pbGxpb246OkxlYWRlclF1ZXJpZXM6OlYxYgZwcm90bzM", [file_nillion_leader_queries_v1_pool_status]);
var LeaderQueries = /* @__PURE__ */ serviceDesc6(file_nillion_leader_queries_v1_service, 0);

// src/vm/operation/query-pool-status.ts
var QueryPoolStatusConfig = z9.object({
  vm: z9.custom()
});
var PreprocessingOffsets = z9.object({
  element: z9.number(),
  start: z9.bigint(),
  end: z9.bigint()
});
var PoolStatus = z9.object({
  offsets: z9.array(PreprocessingOffsets),
  preprocessingActive: z9.boolean()
});
var QueryPoolStatus = class _QueryPoolStatus {
  constructor(config) {
    this.config = config;
  }
  async invoke() {
    return pipe6(
      E6.tryPromise(() => this.pay()),
      E6.flatMap((receipt) => this.prepareLeaderRequest(receipt)),
      E6.flatMap(
        (request) => retryGrpcRequestIfRecoverable(
          "QueryPoolStatus",
          this.invokeNodeRequest(request)
        )
      ),
      E6.flatMap((response) => E6.try(() => PoolStatus.parse(response))),
      E6.tapBoth({
        onFailure: (e) => E6.sync(() => Log("Query pool status failed: %O", e)),
        onSuccess: (status) => E6.sync(() => Log("Pool status: %O", status))
      }),
      E6.runPromise
    );
  }
  prepareLeaderRequest(signedReceipt) {
    return E6.succeed({
      client: createClient5(LeaderQueries, this.config.vm.leader.transport),
      request: create11(PoolStatusRequestSchema, { signedReceipt })
    });
  }
  invokeNodeRequest(options) {
    const { client, request } = options;
    return pipe6(E6.tryPromise(() => client.poolStatus(request)));
  }
  pay() {
    return this.config.vm.payer.payForOperation(
      create11(PriceQuoteRequestSchema, {
        operation: {
          case: "poolStatus",
          value: {}
        }
      })
    );
  }
  static new(config) {
    return new _QueryPoolStatus(config);
  }
};
var QueryPoolStatusBuilder = class _QueryPoolStatusBuilder {
  constructor(vm) {
    this.vm = vm;
  }
  build() {
    const config = QueryPoolStatusConfig.parse({
      vm: this.vm
    });
    return QueryPoolStatus.new(config);
  }
  static init = (vm) => new _QueryPoolStatusBuilder(vm);
};

// src/vm/operation/retrieve-compute-result.ts
import { create as create12 } from "@bufbuild/protobuf";
import { createClient as createClient6 } from "@connectrpc/connect";
import { PartyShares, decode_values } from "@nillion/client-wasm";
import { Effect as E7, pipe as pipe7 } from "effect";
import { parse as parse3 } from "uuid";
import { z as z10 } from "zod";
var RetrieveComputeResultConfig = z10.object({
  // due to import resolution order we cannot use instanceof because VmClient isn't defined first
  vm: z10.custom(),
  id: Uuid
});
var RetrieveComputeResult = class _RetrieveComputeResult {
  constructor(config) {
    this.config = config;
  }
  async invoke() {
    return pipe7(
      this.prepareRequestPerNode(),
      E7.all,
      E7.map(
        (requests) => requests.map(
          (request) => retryGrpcRequestIfRecoverable(
            "RetrieveComputeResults",
            this.invokeNodeRequest(request)
          )
        )
      ),
      E7.flatMap(
        (effects) => E7.all(effects, { concurrency: this.config.vm.nodes.length })
      ),
      E7.map((results) => {
        const shares = results.map((values2) => values2);
        const values = this.config.vm.masker.unmask(shares);
        const record = values.to_record();
        return NadaValuesRecord.parse(record);
      }),
      E7.tapBoth({
        onFailure: (e) => E7.sync(() => Log("Retrieve compute results failed: %O", e)),
        onSuccess: (data) => E7.sync(() => Log("Retrieved compute results: %O", data))
      }),
      E7.runPromise
    );
  }
  prepareRequestPerNode() {
    const computeId = parse3(this.config.id);
    return this.config.vm.nodes.map(
      (node) => E7.succeed({
        nodeId: node.id,
        client: createClient6(Compute, node.transport),
        request: create12(RetrieveResultsRequestSchema, {
          computeId
        })
      })
    );
  }
  invokeNodeRequest(options) {
    const { nodeId, client, request } = options;
    return pipe7(
      E7.tryPromise(async () => {
        const asyncIterable = client.retrieveResults(request);
        for await (const response of asyncIterable) {
          const state = response.state.case;
          if (state !== "success" && state !== "waitingComputation") {
            throw new Error("Compute result failure from node", {
              cause: response
            });
          }
          if (response.state.case === "success") {
            return new PartyShares(
              nodeId.toWasm(),
              decode_values(response.state.value.bincodeValues)
            );
          }
          Log(`Compute result waiting on: node=${nodeId.toBase64()}`);
        }
      }),
      E7.map((shares) => shares),
      E7.tap(
        () => Log(`Compute result shares retrieved: node=${nodeId.toBase64()}`)
      )
    );
  }
  static new(config) {
    return new _RetrieveComputeResult(config);
  }
};
var RetrieveComputeResultBuilder = class _RetrieveComputeResultBuilder {
  constructor(vm) {
    this.vm = vm;
  }
  _id;
  id(value) {
    this._id = value;
    return this;
  }
  build() {
    const config = RetrieveComputeResultConfig.parse({
      vm: this.vm,
      id: this._id
    });
    return RetrieveComputeResult.new(config);
  }
  static init = (vm) => new _RetrieveComputeResultBuilder(vm);
};

// src/vm/operation/retrieve-permissions.ts
import { create as create13 } from "@bufbuild/protobuf";
import { createClient as createClient7 } from "@connectrpc/connect";
import { Effect as E8, pipe as pipe8 } from "effect";
import { parse as parseUuid2 } from "uuid";
import { z as z11 } from "zod";
var RetrievePermissionsConfig = z11.object({
  // due to import resolution order we cannot use instanceof because VmClient isn't defined first
  vm: z11.custom(),
  id: Uuid
});
var RetrievePermissions = class _RetrievePermissions {
  constructor(config) {
    this.config = config;
  }
  invoke() {
    return pipe8(
      E8.tryPromise(() => this.pay()),
      E8.map((receipt) => this.prepareRequestPerNode(receipt)),
      E8.flatMap(E8.all),
      E8.map(
        (requests) => requests.map(
          (request) => retryGrpcRequestIfRecoverable(
            "RetrievePermissions",
            this.invokeNodeRequest(request)
          )
        )
      ),
      E8.flatMap(
        (effects) => E8.all(effects, { concurrency: this.config.vm.nodes.length })
      ),
      E8.flatMap(collapse),
      E8.tapBoth({
        onFailure: (e) => E8.sync(() => Log("Retrieve permissions failed: %O", e)),
        onSuccess: (data) => E8.sync(() => Log("Retrieved permissions: %O", data))
      }),
      E8.runPromise
    );
  }
  prepareRequestPerNode(signedReceipt) {
    return this.config.vm.nodes.map(
      (node) => E8.succeed({
        nodeId: node.id,
        client: createClient7(Permissions, node.transport),
        request: create13(RetrievePermissionsRequestSchema, {
          signedReceipt
        })
      })
    );
  }
  invokeNodeRequest(options) {
    const { nodeId, client, request } = options;
    return pipe8(
      E8.tryPromise(() => client.retrievePermissions(request)),
      E8.map((response) => ValuesPermissions.from(response)),
      E8.tap(
        (_permissions) => Log(
          `Retrieved permissions: node=${nodeId.toBase64()} values=${this.config.id} `
        )
      )
    );
  }
  async pay() {
    const {
      id,
      vm: { payer }
    } = this.config;
    return payer.payForOperation(
      create13(PriceQuoteRequestSchema, {
        operation: {
          case: "retrievePermissions",
          value: {
            valuesId: parseUuid2(id)
          }
        }
      })
    );
  }
  static new(config) {
    return new _RetrievePermissions(config);
  }
};
var RetrievePermissionsBuilder = class _RetrievePermissionsBuilder {
  constructor(vm) {
    this.vm = vm;
  }
  _id;
  id(value) {
    this._id = value;
    return this;
  }
  build() {
    const config = RetrievePermissionsConfig.parse({
      vm: this.vm,
      id: this._id
    });
    return RetrievePermissions.new(config);
  }
  static init = (vm) => new _RetrievePermissionsBuilder(vm);
};

// src/vm/operation/retrieve-values.ts
import { create as create14 } from "@bufbuild/protobuf";
import { createClient as createClient8 } from "@connectrpc/connect";
import { PartyShares as PartyShares2, decode_values as decode_values2 } from "@nillion/client-wasm";
import { Effect as E9, pipe as pipe9 } from "effect";
import { parse as parseUuid3 } from "uuid";
import { z as z12 } from "zod";
var RetrieveValuesConfig = z12.object({
  // due to import resolution order we cannot use instanceof because VmClient isn't defined first
  vm: z12.custom(),
  id: Uuid
});
var RetrieveValues = class _RetrieveValues {
  constructor(config) {
    this.config = config;
  }
  async invoke() {
    return pipe9(
      E9.tryPromise(() => this.pay()),
      E9.map((receipt) => this.prepareRequestPerNode(receipt)),
      E9.flatMap(E9.all),
      E9.map(
        (requests) => requests.map(
          (request) => retryGrpcRequestIfRecoverable(
            "RetrieveValues",
            this.invokeNodeRequest(request)
          )
        )
      ),
      E9.flatMap(
        (effects) => E9.all(effects, { concurrency: this.config.vm.nodes.length })
      ),
      E9.map((shares) => {
        const values = this.config.vm.masker.unmask(shares);
        const record = values.to_record();
        return NadaValuesRecord.parse(record);
      }),
      E9.tapBoth({
        onFailure: (e) => E9.sync(() => Log("Retrieve values failed: %O", e)),
        onSuccess: (data) => E9.sync(() => Log("Retrieved values: %O", data))
      }),
      E9.runPromise
    );
  }
  prepareRequestPerNode(signedReceipt) {
    return this.config.vm.nodes.map(
      (node) => E9.succeed({
        nodeId: node.id,
        client: createClient8(Values, node.transport),
        request: create14(RetrieveValuesRequestSchema, {
          signedReceipt
        })
      })
    );
  }
  invokeNodeRequest(options) {
    const { nodeId, client, request } = options;
    return pipe9(
      E9.tryPromise(() => client.retrieveValues(request)),
      E9.map(
        (response) => new PartyShares2(
          nodeId.toWasm(),
          decode_values2(response.bincodeValues)
        )
      ),
      E9.tap(
        (id) => Log(`Retrieved values shares: node=${nodeId.toBase64()} values=${id}`)
      )
    );
  }
  pay() {
    const {
      id,
      vm: { payer }
    } = this.config;
    return payer.payForOperation(
      create14(PriceQuoteRequestSchema, {
        operation: {
          case: "retrieveValues",
          value: {
            valuesId: parseUuid3(id)
          }
        }
      })
    );
  }
  static new(config) {
    return new _RetrieveValues(config);
  }
};
var RetrieveValuesBuilder = class _RetrieveValuesBuilder {
  constructor(vm) {
    this.vm = vm;
  }
  _id;
  id(value) {
    this._id = value;
    return this;
  }
  build() {
    const config = RetrieveValuesConfig.parse({
      vm: this.vm,
      id: this._id
    });
    return RetrieveValues.new(config);
  }
  static init = (vm) => new _RetrieveValuesBuilder(vm);
};

// src/vm/operation/store-program.ts
import { create as create15 } from "@bufbuild/protobuf";
import { createClient as createClient9 } from "@connectrpc/connect";
import { ProgramMetadata } from "@nillion/client-wasm";
import { sha256 as sha2563 } from "@noble/hashes/sha2";
import { Effect as E10, pipe as pipe10 } from "effect";
import { z as z13 } from "zod";

// src/gen-proto/nillion/programs/v1/service_pb.ts
import { fileDesc as fileDesc27, serviceDesc as serviceDesc7 } from "@bufbuild/protobuf/codegenv1";

// src/gen-proto/nillion/programs/v1/store_pb.ts
import { fileDesc as fileDesc26, messageDesc as messageDesc19 } from "@bufbuild/protobuf/codegenv1";
var file_nillion_programs_v1_store = /* @__PURE__ */ fileDesc26("Ch9uaWxsaW9uL3Byb2dyYW1zL3YxL3N0b3JlLnByb3RvEhluaWxsaW9uLnByb2dyYW1zLnYxLnN0b3JlImoKE1N0b3JlUHJvZ3JhbVJlcXVlc3QSDwoHcHJvZ3JhbRgBIAEoDBJCCg5zaWduZWRfcmVjZWlwdBgCIAEoCzIqLm5pbGxpb24ucGF5bWVudHMudjEucmVjZWlwdC5TaWduZWRSZWNlaXB0IioKFFN0b3JlUHJvZ3JhbVJlc3BvbnNlEhIKCnByb2dyYW1faWQYASABKAlCswEKHWNvbS5uaWxsaW9uLnByb2dyYW1zLnYxLnN0b3JlQgpTdG9yZVByb3RvUAGiAgROUFZTqgIZTmlsbGlvbi5Qcm9ncmFtcy5WMS5TdG9yZcoCGU5pbGxpb25cUHJvZ3JhbXNcVjFcU3RvcmXiAiVOaWxsaW9uXFByb2dyYW1zXFYxXFN0b3JlXEdQQk1ldGFkYXRh6gIcTmlsbGlvbjo6UHJvZ3JhbXM6OlYxOjpTdG9yZWIGcHJvdG8z", [file_nillion_payments_v1_receipt]);
var StoreProgramRequestSchema = /* @__PURE__ */ messageDesc19(file_nillion_programs_v1_store, 0);

// src/gen-proto/nillion/programs/v1/service_pb.ts
var file_nillion_programs_v1_service = /* @__PURE__ */ fileDesc27("CiFuaWxsaW9uL3Byb2dyYW1zL3YxL3NlcnZpY2UucHJvdG8SE25pbGxpb24ucHJvZ3JhbXMudjEyewoIUHJvZ3JhbXMSbwoMU3RvcmVQcm9ncmFtEi4ubmlsbGlvbi5wcm9ncmFtcy52MS5zdG9yZS5TdG9yZVByb2dyYW1SZXF1ZXN0Gi8ubmlsbGlvbi5wcm9ncmFtcy52MS5zdG9yZS5TdG9yZVByb2dyYW1SZXNwb25zZUKVAQoXY29tLm5pbGxpb24ucHJvZ3JhbXMudjFCDFNlcnZpY2VQcm90b1ABogIDTlBYqgITTmlsbGlvbi5Qcm9ncmFtcy5WMcoCE05pbGxpb25cUHJvZ3JhbXNcVjHiAh9OaWxsaW9uXFByb2dyYW1zXFYxXEdQQk1ldGFkYXRh6gIVTmlsbGlvbjo6UHJvZ3JhbXM6OlYxYgZwcm90bzM", [file_nillion_programs_v1_store]);
var Programs = /* @__PURE__ */ serviceDesc7(file_nillion_programs_v1_service, 0);

// src/vm/operation/store-program.ts
var StoreProgramConfig = z13.object({
  // due to import resolution order we cannot use instanceof because VmClient isn't defined first
  vm: z13.custom(),
  name: z13.string().min(1).max(100),
  program: z13.instanceof(Uint8Array)
});
var StoreProgram = class _StoreProgram {
  constructor(config) {
    this.config = config;
  }
  get payer() {
    return this.config.vm.config.payer;
  }
  async invoke() {
    return pipe10(
      E10.tryPromise(() => this.pay()),
      E10.map((receipt) => this.prepareRequestPerNode(receipt)),
      E10.flatMap(E10.all),
      E10.map(
        (requests) => requests.map(
          (request) => retryGrpcRequestIfRecoverable(
            "StoreProgram",
            this.invokeNodeRequest(request)
          )
        )
      ),
      E10.flatMap(
        (effects) => E10.all(effects, { concurrency: this.config.vm.nodes.length })
      ),
      E10.flatMap(collapse),
      E10.tapBoth({
        onFailure: (e) => E10.sync(() => Log("Store program failed: %O", e)),
        onSuccess: (id) => E10.sync(() => Log(`Stored program: ${id}`))
      }),
      E10.runPromise
    );
  }
  prepareRequestPerNode(signedReceipt) {
    return this.config.vm.nodes.map(
      (node) => E10.succeed({
        nodeId: node.id,
        client: createClient9(Programs, node.transport),
        request: create15(StoreProgramRequestSchema, {
          signedReceipt,
          program: this.config.program
        })
      })
    );
  }
  invokeNodeRequest(options) {
    const { nodeId, client, request } = options;
    return pipe10(
      E10.tryPromise(() => client.storeProgram(request)),
      E10.map((response) => ProgramId.parse(response.programId)),
      E10.tap(
        (id) => Log(`Stored program: node=${nodeId.toBase64()} values=${id} `)
      )
    );
  }
  pay() {
    const {
      name,
      program,
      vm: { payer }
    } = this.config;
    const contentsSha256 = sha2563(program);
    const metadata = new ProgramMetadata(program);
    return payer.payForOperation(
      create15(PriceQuoteRequestSchema, {
        operation: {
          case: "storeProgram",
          value: {
            name,
            contentsSha256,
            metadata: create15(ProgramMetadataSchema, {
              programSize: metadata.memory_size(),
              memorySize: metadata.memory_size(),
              instructionCount: metadata.total_instructions(),
              instructions: metadata.instructions(),
              preprocessingRequirements: metadata.preprocessing_requirements()
            })
          }
        }
      })
    );
  }
  static new(config) {
    return new _StoreProgram(config);
  }
};
var StoreProgramBuilder = class _StoreProgramBuilder {
  constructor(vm) {
    this.vm = vm;
  }
  _name;
  _program;
  name(value) {
    this._name = ProgramName.parse(value);
    return this;
  }
  program(value) {
    this._program = value;
    return this;
  }
  build() {
    const config = StoreProgramConfig.parse({
      vm: this.vm,
      name: this._name,
      program: this._program
    });
    return StoreProgram.new(config);
  }
  static init = (vm) => new _StoreProgramBuilder(vm);
};

// src/vm/operation/store-values.ts
import { create as create16 } from "@bufbuild/protobuf";
import { createClient as createClient10 } from "@connectrpc/connect";
import {
  NadaValues as NadaValues2,
  compute_values_size as compute_values_size2,
  encode_values as encode_values2
} from "@nillion/client-wasm";
import { Effect as E11, pipe as pipe11 } from "effect";
import { UnknownException as UnknownException4 } from "effect/Cause";
import { parse as parse4, stringify as stringify2 } from "uuid";
import { z as z14 } from "zod";
var StoreValuesConfig = z14.object({
  // due to import resolution order we cannot use instanceof because VmClient isn't defined first
  vm: z14.custom(),
  id: Uuid.nullish(),
  values: z14.instanceof(NadaValues2),
  ttl: TtlDays,
  permissions: z14.custom()
});
var StoreValues = class _StoreValues {
  constructor(config) {
    this.config = config;
  }
  invoke() {
    return pipe11(
      E11.tryPromise(() => this.pay()),
      E11.map((receipt) => this.prepareRequestPerNode(receipt)),
      E11.flatMap(E11.all),
      E11.map(
        (requests) => requests.map(
          (request) => retryGrpcRequestIfRecoverable(
            "StoreValues",
            this.invokeNodeRequest(request)
          )
        )
      ),
      E11.flatMap(
        (effects) => E11.all(effects, { concurrency: this.config.vm.nodes.length })
      ),
      E11.flatMap(collapse),
      E11.tapBoth({
        onFailure: (e) => E11.sync(() => Log("Values store failed: %O", e)),
        onSuccess: (id) => E11.sync(() => Log(`Values stored: ${id}`))
      }),
      E11.runPromise
    );
  }
  prepareRequestPerNode(signedReceipt) {
    const {
      values,
      vm: { nodes, masker }
    } = this.config;
    const permissions = this.config.permissions.toProto();
    const updateIdentifier = this.config.id ? parse4(this.config.id) : void 0;
    const shares = masker.mask(values);
    return shares.map((share) => {
      const nodeId = PartyId.from(share.party.to_byte_array());
      const node = nodes.find((n) => n.id.toBase64() === nodeId.toBase64());
      if (!node) {
        return E11.fail(
          new UnknownException4(
            `Failed to match configured nodes with share's party id:${nodeId}`
          )
        );
      }
      return E11.succeed({
        nodeId,
        client: createClient10(Values, node.transport),
        request: create16(StoreValuesRequestSchema, {
          signedReceipt,
          bincodeValues: encode_values2(share.shares),
          permissions,
          updateIdentifier
        })
      });
    });
  }
  invokeNodeRequest(options) {
    const { nodeId, client, request } = options;
    return pipe11(
      E11.tryPromise(() => client.storeValues(request)),
      E11.map((response) => stringify2(response.valuesId)),
      E11.tap(
        (id) => Log(`Values stored: node=${nodeId.toBase64()} values=${id}`)
      )
    );
  }
  pay() {
    const {
      ttl: ttlDays,
      values,
      vm: { payer, masker }
    } = this.config;
    const payloadSize = compute_values_size2(values);
    const classify = masker.classify_values(values);
    return payer.payForOperation(
      create16(PriceQuoteRequestSchema, {
        operation: {
          case: "storeValues",
          value: {
            particlesCount: classify.particles,
            secretSharedCount: classify.shares,
            publicValuesCount: classify.public,
            ttlDays,
            payloadSize
          }
        }
      })
    );
  }
  static new(config) {
    return new _StoreValues(config);
  }
};
var StoreValuesBuilder = class _StoreValuesBuilder {
  constructor(vm) {
    this.vm = vm;
    this._permissions = ValuesPermissionsBuilder.default(this.vm.id);
  }
  _id;
  _ttl;
  _permissions;
  _values = new NadaValues2();
  value(name, value) {
    this._values.insert(name, value);
    return this;
  }
  ttl(value) {
    this._ttl = value;
    return this;
  }
  id(value) {
    this._id = value;
    return this;
  }
  permissions(value) {
    this._permissions = value;
    return this;
  }
  build() {
    const config = StoreValuesConfig.parse({
      vm: this.vm,
      id: this._id,
      values: this._values,
      ttl: this._ttl,
      permissions: this._permissions
    });
    return StoreValues.new(config);
  }
  static init = (vm) => new _StoreValuesBuilder(vm);
};

// src/vm/operation/update-permissions.ts
import { create as create17 } from "@bufbuild/protobuf";
import { createClient as createClient11 } from "@connectrpc/connect";
import { Effect as E12, pipe as pipe12 } from "effect";
import { parse as parseUuid4 } from "uuid";
import { z as z15 } from "zod";
var UpdatePermissionsConfig = z15.object({
  // due to import resolution order we cannot use instanceof because VmClient isn't defined first
  vm: z15.custom(),
  id: Uuid,
  retrieve: z15.instanceof(PermissionCommand),
  update: z15.instanceof(PermissionCommand),
  _delete: z15.instanceof(PermissionCommand),
  compute: z15.instanceof(ComputePermissionCommand)
});
var UpdatePermissions = class _UpdatePermissions {
  constructor(config) {
    this.config = config;
  }
  invoke() {
    return pipe12(
      E12.tryPromise(() => this.pay()),
      E12.map((receipt) => this.prepareRequestPerNode(receipt)),
      E12.flatMap(E12.all),
      E12.map(
        (requests) => requests.map(
          (request) => retryGrpcRequestIfRecoverable(
            "UpdatePermissions",
            this.invokeNodeRequest(request)
          )
        )
      ),
      E12.flatMap(
        (effects) => E12.all(effects, { concurrency: this.config.vm.nodes.length })
      ),
      E12.flatMap(collapse),
      E12.tapBoth({
        onFailure: (e) => E12.sync(() => Log("Update permissions failed: %O", e)),
        onSuccess: (id) => E12.sync(() => Log(`Updated permissions: ${id}`))
      }),
      E12.runPromise
    );
  }
  prepareRequestPerNode(signedReceipt) {
    const retrieve = this.config.retrieve.toProto();
    const update = this.config.update.toProto();
    const _delete = this.config._delete.toProto();
    const compute = this.config.compute.toProto();
    return this.config.vm.nodes.map(
      (node) => E12.succeed({
        nodeId: node.id,
        client: createClient11(Permissions, node.transport),
        request: create17(UpdatePermissionsRequestSchema, {
          signedReceipt,
          retrieve,
          update,
          delete: _delete,
          compute
        })
      })
    );
  }
  invokeNodeRequest(options) {
    const { nodeId, client, request } = options;
    return pipe12(
      E12.tryPromise(() => client.updatePermissions(request)),
      E12.map((_response) => this.config.id),
      E12.tap(
        (id) => Log(`Updated permissions: node=${nodeId.toBase64()} values=${id} `)
      )
    );
  }
  pay() {
    const {
      id,
      vm: { payer }
    } = this.config;
    return payer.payForOperation(
      create17(PriceQuoteRequestSchema, {
        operation: {
          case: "updatePermissions",
          value: {
            valuesId: parseUuid4(id)
          }
        }
      })
    );
  }
  static new(config) {
    return new _UpdatePermissions(config);
  }
};
var UpdatePermissionsBuilder = class _UpdatePermissionsBuilder {
  constructor(vm) {
    this.vm = vm;
  }
  _valuesId;
  _retrieve = PermissionCommandBuilder.init();
  _update = PermissionCommandBuilder.init();
  _delete = PermissionCommandBuilder.init();
  _compute = ComputePermissionCommandBuilder.init();
  valuesId(value) {
    this._valuesId = value;
    return this;
  }
  retrieve(value) {
    this._retrieve = value;
    return this;
  }
  update(value) {
    this._update = value;
    return this;
  }
  delete(value) {
    this._delete = value;
    return this;
  }
  compute(value) {
    this._compute = value;
    return this;
  }
  grantRetrieve(id) {
    this._retrieve.grant(id);
    return this;
  }
  revokeRetrieve(id) {
    this._retrieve.revoke(id);
    return this;
  }
  grantUpdate(id) {
    this._update.grant(id);
    return this;
  }
  revokeUpdate(id) {
    this._update.revoke(id);
    return this;
  }
  grantDelete(id) {
    this._delete.grant(id);
    return this;
  }
  revokeDelete(id) {
    this._delete.revoke(id);
    return this;
  }
  grantCompute(id, program) {
    this._compute.grant(id, program);
    return this;
  }
  revokeCompute(id, program) {
    this._compute.revoke(id, program);
    return this;
  }
  toObject() {
    return {
      valuesId: this._valuesId,
      retrieve: this._retrieve.toObject(),
      update: this._update.toObject(),
      delete: this._delete.toObject(),
      compute: this._compute.toObject()
    };
  }
  build() {
    const config = UpdatePermissionsConfig.parse({
      vm: this.vm,
      id: this._valuesId,
      retrieve: this._retrieve.build(),
      update: this._update.build(),
      _delete: this._delete.build(),
      compute: this._compute.build()
    });
    return UpdatePermissions.new(config);
  }
  static init = (vm) => new _UpdatePermissionsBuilder(vm);
};

// src/vm/client.ts
var NodeConfig = z16.object({
  id: z16.instanceof(PartyId),
  transport: GrpcTransport
});
var VmClientConfig = z16.object({
  id: z16.instanceof(UserId),
  payer: z16.instanceof(PaymentClient),
  masker: z16.instanceof(SecretMasker),
  leader: NodeConfig,
  nodes: z16.array(NodeConfig)
});
var VmClient = class {
  /**
   * Creates a  VmClient instance.
   *
   * @param {VmClientConfig} config - Configuration settings for the client
   */
  constructor(config) {
    this.config = config;
  }
  /**
   * A user identifier derived from a public key.
   *
   * @returns {UserId} This client's unique identifier
   * @see PublicKey
   */
  get id() {
    return this.config.id;
  }
  /**
   * The leader node's configuration.
   *
   * @returns {NodeConfig} Configuration object for the leader node
   */
  get leader() {
    return this.config.leader;
  }
  /**
   * Configuration for all non-leader nodes.
   *
   * @returns {NodeConfig[]} Array of node configuration objects
   */
  get nodes() {
    return this.config.nodes;
  }
  /**
   * The NilChain payment client using the provided {OfflineSigner}.
   * This client is automatically invoked as part of an {Operation}'s invocation.
   *
   * @returns {PaymentClient} Payment client for managing operation costs
   * @see Operation.invoke
   */
  get payer() {
    return this.config.payer;
  }
  /**
   * Wasm class for masking and unmasking secret share values.
   *
   * @returns {SecretMasker} Secret masking utility instance
   */
  get masker() {
    return this.config.masker;
  }
  /**
   * Creates a builder for querying the preprocessing pool status of the cluster.
   *
   * @returns {QueryPoolStatusBuilder} Builder for constructing pool status queries
   * @see QueryPoolStatusBuilder
   * @example
   * ```ts
   * const status = await client
   *  .queryPoolStatus()
   *  .build()
   *  .invoke();
   * ```
   */
  queryPoolStatus() {
    return QueryPoolStatusBuilder.init(this);
  }
  /**
   * Creates a builder for storing secret values in the cluster.
   *
   * @returns {StoreValuesBuilder} Builder for constructing store values operations
   * @see StoreValuesBuilder
   * @example
   * Store values:
   * ```ts
   * const id = await client
   *   .storeValues()
   *   .ttl(1)
   *   .value("foo", NadaValue.new_secret_integer("42"))
   *   .value("bar", NadaValue.new_public_integer("23"))
   *   .value("baz", NadaValue.new_secret_blob(Uint8Array.from([1, 2, 3])))
   *   .build()
   *   .invoke();
   *
   * console.log(id) // "312fda16-3bfa-4160-89cf-389e224c91b6"
   * ```
   *
   * @example
   * If names overlap then update otherwise replace values at the given id:
   * ```ts
   * const id = await client
   *   .storeValues()
   *   .ttl(1)
   *   .id(id) // the exist values id to update
   *   .value("bob", NadaValue.new_secret_integer("77"))
   *   .build()
   *   .invoke();
   *
   * console.log(id) // "312fda16-3bfa-4160-89cf-389e224c91b6"
   * ```
   */
  storeValues() {
    return StoreValuesBuilder.init(this);
  }
  /**
   * Creates a builder for retrieving secret values from the cluster.
   *
   * @returns {RetrieveValuesBuilder} Builder for constructing retrieve operations
   * @see RetrieveValuesBuilder
   * @example
   * ```ts
   * const data = await client
   *   .retrieveValues()
   *   .id(id)
   *   .build()
   *   .invoke();
   *
   * console.log(id) // [{"name":"bob","value":{"type":"SecretInteger","value":"77"}}]
   * ```
   */
  retrieveValues() {
    return RetrieveValuesBuilder.init(this);
  }
  /**
   * Creates a builder for deleting secret values from the cluster.
   *
   * @returns {DeleteValuesBuilder} Builder for constructing delete operations
   * @see DeleteValuesBuilder
   * @example
   * ```ts
   * await client
   *   .deleteValues()
   *   .id(id)
   *   .build()
   *   .invoke();
   * ```
   */
  deleteValues() {
    return DeleteValuesBuilder.init(this);
  }
  /**
   * Creates a builder for retrieving permissions associated with values.
   *
   * @returns {RetrievePermissionsBuilder} Builder for constructing permission retrieval operations
   * @see RetrievePermissionsBuilder
   * @example
   * ```ts
   * const permissions = await client
   *   .retrievePermissions()
   *   .id(id)
   *   .build()
   *   .invoke();
   *
   * console.log(permissions) // {"owner":"163aff316bd4247d86f73d088a620f8d77ff88b5","retrieve":["163aff316bd4247d86f73d088a620f8d77ff88b5"],"update":["163aff316bd4247d86f73d088a620f8d77ff88b5"],"delete":["163aff316bd4247d86f73d088a620f8d77ff88b5"],"compute":[]}
   * ```
   */
  retrievePermissions() {
    return RetrievePermissionsBuilder.init(this);
  }
  /**
   * Creates a builder for updating existing permissions on values.
   *
   * @returns {UpdatePermissionsBuilder} Builder for constructing permission update operations
   * @see UpdatePermissionsBuilder
   * @example
   * ```ts
   * await client
   *   .updatePermissions()
   *   .valuesId(id)
   *   .revokeDelete(client.id)
   *   .build()
   *   .invoke();
   *
   * const updatedPermissions = await client
   *   .retrievePermissions()
   *   .id(id)
   *   .build()
   *   .invoke();
   *
   * console.log(permissions) // {"owner":"163aff316bd4247d86f73d088a620f8d77ff88b5","retrieve":["163aff316bd4247d86f73d088a620f8d77ff88b5"],"update":["163aff316bd4247d86f73d088a620f8d77ff88b5"],"delete":[],"compute":[]}
   * ```
   */
  updatePermissions() {
    return UpdatePermissionsBuilder.init(this);
  }
  /**
   * Creates a builder for completely overwriting permissions on values.
   *
   * @returns {OverwritePermissionsBuilder} Builder for constructing permission overwrite operations
   * @see OverwritePermissionsBuilder
   * @example
   * ```ts
   * const permissions = ValuesPermissionsBuilder.default(client.id);
   *
   * const permissions = await client
   *   .overwritePermissions()
   *   .permissions(next)
   *   .id(id)
   *   .build()
   *   .invoke();
   *
   * console.log(permissions) // {"owner":"163aff316bd4247d86f73d088a620f8d77ff88b5","retrieve":["163aff316bd4247d86f73d088a620f8d77ff88b5"],"update":["163aff316bd4247d86f73d088a620f8d77ff88b5"],"delete":[],"compute":[]}
   * ```
   */
  overwritePermissions() {
    return OverwritePermissionsBuilder.init(this);
  }
  /**
   * Creates a builder for storing Nada programs in the cluster.
   *
   * @returns {StoreProgramBuilder} Builder for constructing program storage operations
   * @see StoreProgramBuilder
   * @example
   * ```ts
   * const program: Uint8Array = loadProgram("simple_shares.nada.bin");
   *
   * const programId = await client
   *   .storeProgram()
   *   .name(name)
   *   .program(program)
   *   .build()
   *   .invoke();
   *
   * console.log(programId) // 163aff316bd4247d86f73d088a620f8d77ff88b5/addition_division.nada.bin/sha256/5c9a45727ae02ed8aea7269460ae66d462604c910bba87afb90b8a6c2c5119d9
   * ```
   */
  storeProgram() {
    return StoreProgramBuilder.init(this);
  }
  /**
   * Creates a builder for invoking secure computation programs.
   *
   * @returns {InvokeComputeBuilder} Builder for constructing compute invocation operations
   * @see InvokeComputeBuilder
   * @example
   * ```ts
   * const computeResultId = await client
   *   .invokeCompute()
   *   .program(programId)
   *   .inputParty("Party1", client.id)
   *   .outputParty("Party1", [client.id])
   *   .computeTimeValues("A", NadaValue.new_secret_integer("1"))
   *   .computeTimeValues("B", NadaValue.new_secret_integer("4"))
   *   .build()
   *   .invoke();
   *
   * console.log(computeResultId) // 5d2fb309-23b3-4a16-8070-c8b802707768
   * ```
   */
  invokeCompute() {
    return InvokeComputeBuilder.init(this);
  }
  /**
   * Creates a builder for retrieving results of secure computations.
   *
   * @returns {RetrieveComputeResultBuilder} Builder for constructing compute result retrieval operations
   * @see RetrieveComputeResultBuilder
   * @example
   * ```ts
   * const result = await client
   *   .retrieveComputeResult()
   *   .id(computeResultId)
   *   .build()
   *   .invoke();
   *
   *  console.log(result) // {"my_output":{"type":"SecretInteger","value":"12"}}
   * ```
   */
  retrieveComputeResult() {
    return RetrieveComputeResultBuilder.init(this);
  }
};

// src/vm/builder.ts
var VmClientBuilderConfig = z17.object({
  bootnodeUrl: z17.string().url("Invalid bootnode url"),
  chainUrl: z17.string().url("Invalid chain url"),
  signer: OfflineSignerSchema,
  seed: z17.string().min(1)
});
var VmClientBuilder = class {
  _bootnodeUrl;
  _chainUrl;
  _signer;
  _seed;
  _authTokenTtl;
  /**
   * Set the Nillion network bootnode Url. This can be any node in the network.
   *
   * @param {string} url - The Url of the bootnode.
   * @returns {this} The current builder instance.
   */
  bootnodeUrl(url) {
    this._bootnodeUrl = url;
    return this;
  }
  /**
   * Set the NiLChain RPC Url.
   *
   * @param {string} url - The URL of the chain.
   * @returns {this} The current builder instance.
   */
  chainUrl(url) {
    this._chainUrl = url;
    return this;
  }
  /**
   * Set the {OfflineSigner} used for signing transactions.
   *
   * @param {OfflineSigner} signer - The offline signer instance.
   * @returns {this} The current builder instance.
   */
  signer(signer) {
    this._signer = signer;
    return this;
  }
  /**
   * Set the user secret seed for generating gRPC authentication tokens.
   *
   * @param {string} seed - The seed string.
   * @returns {this} The current builder instance.
   */
  seed(seed) {
    this._seed = seed;
    return this;
  }
  /**
   * Builds and returns a configured {VmClient} instance.
   *
   * This method initializes the client with the specified configuration
   * options, connects to a bootnode to retrieve Nillion network configuration,
   * and instantiates a VmClient.
   *
   * @returns {Promise<VmClient>} A promise that resolves to a configured `VmClient` instance.
   * @throws {Error} If builder configuration is incomplete or invalid.
   */
  async build() {
    const { bootnodeUrl, chainUrl, signer, seed } = VmClientBuilderConfig.parse(
      {
        bootnodeUrl: this._bootnodeUrl,
        chainUrl: this._chainUrl,
        signer: this._signer,
        seed: this._seed
      }
    );
    const tokenAuthManager = TokenAuthManager.fromSeed(seed);
    const cluster = await fetchClusterDetails(bootnodeUrl);
    const leaderClusterInfo = cluster.leader;
    if (!leaderClusterInfo || !leaderClusterInfo.identity || !leaderClusterInfo.grpcEndpoint)
      throw new Error("Leader id not in cluster details");
    const id = PartyId.from(leaderClusterInfo.identity.contents);
    const leader = {
      id,
      transport: createGrpcWebTransport({
        baseUrl: leaderClusterInfo.grpcEndpoint,
        useBinaryFormat: true,
        interceptors: [createAuthInterceptor(tokenAuthManager, id)]
      })
    };
    const nodes = cluster.members.map((node) => {
      assertIsDefined(node.identity?.contents, "node.identity.contents");
      const id2 = PartyId.from(node.identity?.contents);
      return {
        id: id2,
        transport: createGrpcWebTransport({
          baseUrl: node.grpcEndpoint,
          useBinaryFormat: true,
          interceptors: [createAuthInterceptor(tokenAuthManager, id2)]
        })
      };
    });
    let masker;
    const polynomialDegree = BigInt(cluster.polynomialDegree);
    const partyIds = nodes.map((node) => node.id.toWasm());
    switch (cluster.prime) {
      case 0 /* SAFE_64_BITS */: {
        masker = SecretMasker2.new_64_bit_safe_prime(polynomialDegree, partyIds);
        break;
      }
      case 1 /* SAFE_128_BITS */: {
        masker = SecretMasker2.new_128_bit_safe_prime(
          polynomialDegree,
          partyIds
        );
        break;
      }
      case 2 /* SAFE_256_BITS */: {
        masker = SecretMasker2.new_256_bit_safe_prime(
          polynomialDegree,
          partyIds
        );
        break;
      }
      default: {
        throw new Error(`Unsupported cluster prime: ${cluster.prime}`);
      }
    }
    const payer = await new PaymentClientBuilder().chainUrl(chainUrl).signer(signer).leader(leader.transport).build();
    const config = VmClientConfig.parse({
      id: UserId.from(tokenAuthManager.publicKey),
      payer,
      masker,
      leader,
      nodes
    });
    Log("Client connected");
    return new VmClient(config);
  }
};
var fetchClusterDetails = (bootnodeUrl) => {
  return createClient12(
    Membership,
    createGrpcWebTransport({
      baseUrl: bootnodeUrl,
      useBinaryFormat: true
    })
  ).cluster({});
};

// src/index.ts
import { NadaValue } from "@nillion/client-wasm";
export {
  AuthenticatedGrpcTransport,
  ComputePermissionCommand,
  ComputePermissionCommandBuilder,
  DeleteValues,
  DeleteValuesBuilder,
  DeleteValuesConfig,
  GrpcClient,
  GrpcTransport,
  InputBindings,
  InvokeCompute,
  InvokeComputeBuilder,
  InvokeComputeConfig,
  Log,
  MsgPayForCompatWrapper,
  NadaValue,
  NadaValuesRecord,
  NilChainAddress,
  NilChainAddressPrefix,
  NilChainProtobufTypeUrl,
  NilToken,
  NodeConfig,
  OfflineSignerSchema,
  OutputBindings,
  OverwritePermissions,
  OverwritePermissionsBuilder,
  OverwritePermissionsConfig,
  PartyId,
  PartyName,
  PaymentClient,
  PaymentClientBuilder,
  PaymentClientConfig,
  PermissionCommand,
  PermissionCommandBuilder,
  PoolStatus,
  PreprocessingOffsets,
  PrivateKeyBase16,
  ProgramId,
  ProgramName,
  QueryPoolStatus,
  QueryPoolStatusBuilder,
  QueryPoolStatusConfig,
  Quote,
  RetrieveComputeResult,
  RetrieveComputeResultBuilder,
  RetrieveComputeResultConfig,
  RetrievePermissions,
  RetrievePermissionsBuilder,
  RetrievePermissionsConfig,
  RetrieveValues,
  RetrieveValuesBuilder,
  RetrieveValuesConfig,
  StoreProgram,
  StoreProgramBuilder,
  StoreProgramConfig,
  StoreValues,
  StoreValuesBuilder,
  StoreValuesConfig,
  TimestampToDateSchema,
  TtlDays,
  TxHash,
  UpdatePermissions,
  UpdatePermissionsBuilder,
  UpdatePermissionsConfig,
  UserId,
  Uuid,
  ValuesPermissions,
  ValuesPermissionsBuilder,
  VmClient,
  VmClientBuilder,
  VmClientBuilderConfig,
  VmClientConfig,
  assertIsDefined,
  collapse,
  createSignerFromKey,
  fetchClusterDetails,
  retryGrpcRequestIfRecoverable
};
